<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.iszion.api.sal.dao.SalDAO">

    <!-- ###  매입전표관리    ################################ -->
    <select id="sal1010_list_event" resultType="java.util.HashMap">
        SELECT
                i.BUY_DAY               as  eventDay
          FROM SBUYHTB i
         WHERE 1=1
            AND SUBSTRING(i.BUY_DAY, 1, 4) =  #{paramYear}
            AND SUBSTRING(i.BUY_DAY, 5, 2) = #{paramMonth}
         GROUP BY i.BUY_DAY

    </select>

    <select id="sal1010_list_search" resultType="java.util.HashMap">
        SELECT
               ih.BUY_DAY           as  buyDay
             , ih.SEQ               as  seq
             , ih.CUST_CD           as  custCd
             , ih.DIV_CD            as  divCd
             , cu.CUST_NM           as  custNm
             , IFNULL(id.TOT_SEQ,0) as  totSeq
             , IFNULL(id.TOT_QTY,0) as  totQty
             , ih.REMARKS           as  remarks
             , ih.REG_DATE          as  regDate
             , ih.REG_ID            as  regId
             , ih.UPDATE_DATE       as  updateDate
             , ih.UPDATE_ID         as  updateId
        FROM SBUYHTB as ih
             -- 입고 아이템 체크
             left outer join (
                                SELECT BUY_DAY, SEQ, COUNT(*) as TOT_SEQ, SUM(QTY) as TOT_QTY
                                    FROM SBUYDTB where LEFT(BUY_DAY,6)   = #{paramYyMm }
                                    GROUP BY BUY_DAY, SEQ
                            ) id ON id.BUY_DAY = ih.BUY_DAY AND id.SEQ = ih.SEQ

            -- 거래처코드
             left outer join MCUSTTB as cu ON cu.CUST_CD  = ih.CUST_CD

        where 1=1
          AND LEFT(ih.BUY_DAY,6)     =   #{paramYyMm }
        <if test='paramValueNm != null and paramValueNm != ""'>
            AND (     ih.CUST_CD LIKE CONCAT( '%', #{paramValueNm }, '%' )
                  OR  ih.REMARKS LIKE CONCAT( '%', #{paramValueNm }, '%')
                  OR  cu.CUST_NM LIKE CONCAT( '%', #{paramValueNm }, '%')
                 )
        </if>
        order by ih.BUY_DAY desc, ih.SEQ desc

    </select>

    <select id="sal1010_list_header" resultType="java.util.HashMap">
        SELECT
               ih.BUY_DAY           as  buyDay
             , ih.SEQ               as  seq
             , ih.CUST_CD           as  custCd
             , ih.DIV_CD            as  divCd
             , cu.CUST_NM           as  custNm
             , IFNULL(id.TOT_SEQ,0) as  totSeq
             , IFNULL(id.TOT_QTY,0) as  totQty
             , ih.REMARKS           as  remarks
             , ih.REG_DATE          as  regDate
             , ih.REG_ID            as  regId
             , ih.UPDATE_DATE       as  updateDate
             , ih.UPDATE_ID         as  updateId
        FROM SBUYHTB as ih
             -- 입고 아이템 체크
             left outer join (
                                SELECT SEQ, COUNT(*) as TOT_SEQ, SUM(QTY) as TOT_QTY
                                    FROM SBUYDTB where BUY_DAY   = #{paramBuyDay }
                                    GROUP BY SEQ
                            ) id ON id.SEQ = ih.SEQ

            -- 거래처코드
             left outer join MCUSTTB as cu ON cu.CUST_CD  = ih.CUST_CD

        where 1=1
          AND ih.BUY_DAY     =   #{paramBuyDay }
        order by ih.BUY_DAY desc, ih.SEQ desc

    </select>

    <select id="sal1010_select_header" resultType="java.util.HashMap">
        SELECT
               ih.BUY_DAY           as  buyDay
             , ih.SEQ               as  seq
             , ih.CUST_CD           as  custCd
             , ih.DIV_CD            as  divCd
             , cu.CUST_NM           as  custNm
             , ih.REMARKS           as  remarks
             , ih.REG_DATE          as  regDate
             , ih.REG_ID            as  regId
             , ih.UPDATE_DATE       as  updateDate
             , ih.UPDATE_ID         as  updateId
        FROM SBUYHTB as ih
            -- 거래처코드
             left outer join MCUSTTB as cu ON cu.CUST_CD  = ih.CUST_CD

        where 1=1
          AND ih.BUY_DAY    =   #{paramBuyDay }
          AND ih.SEQ        =   #{paramSeq }

    </select>

    <select id="sal1010_select_list_details" resultType="java.util.HashMap">
        SELECT
               id.BUY_DAY           as  buyDay
             , id.SEQ               as  seq
             , id.CNT               as  cnt
             , id.CUST_CD           as  custCd
             , id.DIV_CD            as  divCd
             , id.BUY_FG            as  buyFg
             , c1.COMM_NM           as  buyFgNm
             , id.PROD_CD           as  prodCd
             , pd.PROD_NM           as  prodNm
             , id.QTY               as  qty
             , id.PRICE             as  price
             , id.AMT               as  amt
             , id.BUY_YUL           as  buyYul
             , id.REMARKS           as  remarks
             , id.REG_DATE          as  regDate
             , id.REG_ID            as  regId
             , id.UPDATE_DATE       as  updateDate
             , id.UPDATE_ID         as  updateId
             , 'R'                  as  iuD
        FROM SBUYDTB as id
            -- 거래처코드
             left outer join MPRODTB as pd ON pd.PROD_CD  = id.PROD_CD
             left outer join MCOMMTB as c1 ON c1.COMM_CD  = id.BUY_FG

        where 1=1
          AND id.BUY_DAY    =   #{paramBuyDay }
          AND id.SEQ        =   #{paramSeq }

    </select>

    <select id="sal1010_maxSeqCheck" resultType="java.util.HashMap">
        SELECT IFNULL( LPAD(CAST(MAX(SEQ) AS UNSIGNED) + 1, 4, '0'), '0001') as maxSeq
         FROM SBUYHTB
        WHERE BUY_DAY   =   #{paramBuyDay }
    </select>


    <insert id="sal1010_insert_header" parameterType="java.util.Map" useGeneratedKeys="true" keyProperty="seq">
        <selectKey keyProperty="seq" resultType="String" order="BEFORE">
            SELECT IFNULL( LPAD(CAST(MAX(SEQ) AS UNSIGNED) + 1, 4, '0'), '0001') as seq
              FROM SBUYHTB
             WHERE BUY_DAY   =   #{stdDay}
        </selectKey>
        <foreach collection="list1" item="item" separator=";">
            INSERT INTO SBUYHTB
                (
                      BUY_DAY
                    , SEQ
                    , CUST_CD
                    , DIV_CD
                    , REMARKS
                    , REG_DATE
                    , REG_ID
                    , UPDATE_DATE
                    , UPDATE_ID
                ) VALUES (
                      #{item.buyDay}
                    , #{seq}
                    , #{item.custCd}
                    , #{item.divCd}
                    , #{item.remarks}
                    , NOW()
                    , #{userId}
                    , NOW()
                    , #{userId}
                )
        </foreach>
    </insert>

    <update id="sal1010_update_header" parameterType="java.util.Map">
        <foreach collection="list1" item="item" separator=";">
            UPDATE SBUYHTB
                SET
                      CUST_CD       =   #{item.custCd}
                    , DIV_CD        =   #{item.divCdCd}
                    , REMARKS       =   #{item.remarks}
                    , UPDATE_DATE   =   NOW()
                    , UPDATE_ID     =   #{userId}
            WHERE BUY_DAY           =   #{item.buyDay}
              AND SEQ               =   #{item.seq}
        </foreach>
    </update>

    <delete id="sal1010_delete_header" parameterType="java.util.Map">
        <foreach collection="list1" item="item" separator=";">
            DELETE FROM SBUYHTB
             WHERE BUY_DAY           =   #{item.buyDay}
               AND SEQ               =   #{item.seq}
        </foreach>
    </delete>

    <delete id="sal1010_delete_details_all" parameterType="java.util.Map">
        <foreach collection="list1" item="item" separator=";">
            DELETE FROM SBUYDTB
            WHERE BUY_DAY       =   #{item.buyDay}
              AND SEQ           =   #{item.seq}
        </foreach>
    </delete>



    <insert id="sal1010_insert_details" parameterType="java.util.Map">
        <foreach collection="list1" item="item" separator=";">
            INSERT INTO SBUYDTB
                (
                      BUY_DAY
                    , SEQ
                    , CNT
                    , CUST_CD
                    , DIV_CD
                    , BUY_FG
                    , PROD_CD
                    , QTY
                    , PRICE
                    , AMT
                    , BUY_YUL
                    , REMARKS
                    , REG_DATE
                    , REG_ID
                    , UPDATE_DATE
                    , UPDATE_ID
                ) VALUES (
                      #{item.buyDay}
                    , #{item.seq}
                    , (SELECT IFNULL(max(a.CNT),0) + 1 as cnt from SBUYDTB a where a.BUY_DAY = #{item.buyDay} AND a.SEQ = #{item.seq} )
                    , #{item.custCd}
                    , #{item.divCd}
                    , #{item.buyFg}
                    , #{item.prodCd}
                    , #{item.qty}
                    , #{item.price}
                    , #{item.amt}
                    , #{item.buyYul}
                    , #{item.remarks}
                    , NOW()
                    , #{userId}
                    , NOW()
                    , #{userId}
                )
        </foreach>
    </insert>

    <update id="sal1010_update_details" parameterType="java.util.Map">
        <foreach collection="list1" item="item" separator=";">
            UPDATE SBUYDTB
                SET
                      CUST_CD       =   #{item.custCd}
                    , DIV_CD        =   #{item.divCd}
                    , BUY_FG        =   #{item.buyFg}
                    , PROD_CD       =   #{item.prodCd}
                    , QTY           =   #{item.qty}
                    , PRICE         =   #{item.price}
                    , AMT           =   #{item.amt}
                    , BUY_YUL       =   #{item.buyYul}
                    , REMARKS       =   #{item.remarks}
                    , UPDATE_DATE   =   NOW()
                    , UPDATE_ID     =   #{userId}
            WHERE BUY_DAY           =   #{item.buyDay}
              AND SEQ               =   #{item.seq}
              AND CNT               =   #{item.cnt}
        </foreach>
    </update>

    <delete id="sal1010_delete_details" parameterType="java.util.Map">
        <foreach collection="list1" item="item" separator=";">
            DELETE FROM SBUYDTB
             WHERE BUY_DAY           =   #{item.buyDay}
               AND SEQ               =   #{item.seq}
               AND CNT               =   #{item.cnt}
        </foreach>
    </delete>

    <!-- ###  매입전표현황    ################################ -->
    <select id="sal1020_list" resultType="java.util.HashMap">
        SELECT
               ROWNUM()             as  rowNum
             , id.BUY_DAY           as  buyDay
             , id.SEQ               as  seq
             , id.CNT               as  cnt
             , id.CUST_CD           as  custCd
             , cu.CUST_NM           as  custNm
             , id.DIV_CD            as  divCd
             , id.BUY_FG            as  buyFg
             , c1.COMM_NM           as  buyFgNm
             , id.PROD_CD           as  prodCd
             , pd.PROD_NM           as  prodNm
             , SUM(id.QTY)          as  qty
             , id.PRICE             as  price
             , SUM(id.AMT)          as  amt
             , id.BUY_YUL           as  buyYul
             , id.REMARKS           as  remarks
        FROM SBUYDTB as id
                 -- 거래처코드
                 left outer join MCUSTTB as cu ON cu.CUST_CD  = id.CUST_CD
                 left outer join MPRODTB as pd ON pd.PROD_CD  = id.PROD_CD
                 left outer join MCOMMTB as c1 ON c1.COMM_CD  = id.BUY_FG

        where 1=1
          AND id.BUY_DAY  BETWEEN #{paramBuyDayFrom } AND  #{paramBuyDayTo }
        <if test='paramBuyFg != null and paramBuyFg != ""'>
            AND id.BUY_FG   =   #{paramBuyFg }
        </if>
        <if test='paramValue != null and paramValue != ""'>
            AND (     cu.CUST_CD LIKE CONCAT( '%', #{paramValue }, '%' )
                  OR  id.REMARKS LIKE CONCAT( '%', #{paramValue }, '%')
                  OR  cu.CUST_NM LIKE CONCAT( '%', #{paramValue }, '%')
                  OR  id.PROD_CD LIKE CONCAT( '%', #{paramValue }, '%')
                  OR  pd.PROD_NM LIKE CONCAT( '%', #{paramValue }, '%')
                )
        </if>
        GROUP BY id.BUY_DAY, id.SEQ, id.CNT
        WITH ROLLUP

    </select>


    <!-- ###  매출전표 관리    ################################ -->
    <select id="sal2010_list_event" resultType="java.util.HashMap">
        SELECT
            h.DEAL_DAY               as  eventDay
        FROM SDEALHTB h
        WHERE 1=1
          AND SUBSTRING(h.DEAL_DAY, 1, 4) =  #{paramYear}
          AND SUBSTRING(h.DEAL_DAY, 5, 2) = #{paramMonth}
        GROUP BY h.DEAL_DAY

    </select>

    <select id="sal2010_list_search" resultType="java.util.HashMap">
        SELECT
                  h.DEAL_DAY        as  dealDay
                , h.SEQ             as  seq
                , h.DIV_CD          as  divCd
                , h.CUST_CD         as  custCd
                , c.CUST_NM         as  custNm
                , h.CUSTS_CD        as  custsCd
                , h.CUST_SEQ        as  custSeq
                , d.SUM_CNT		    as 	sumCnt
                , d.SUM_QTY  		as 	sumQty
                , d.SUM_AMT   		as	sumAmt
                , d.RECEIPT_YN      as  receiptYn
                , h.REMARKS         as  remarks
                , h.REG_DATE        as  regDate
                , h.REG_ID          as  regId
                , h.UPDATE_DATE     as  updateDate
                , h.UPDATE_ID       as  updateId
        FROM SDEALHTB as h

            -- 출고자료 체크
            left outer join (
                                SELECT DEAL_DAY, SEQ, COUNT(*) AS SUM_CNT, SUM(QTY)as SUM_QTY, SUM(AMT) as SUM_AMT, RECEIPT_YN
                                  FROM SDEALDTB
                                  WHERE LEFT(DEAL_DAY,6)   = #{paramYyMm }
                                  GROUP BY DEAL_DAY, SEQ
                            ) d ON d.DEAL_DAY = h.DEAL_DAY AND d.SEQ = h.SEQ
            -- 거래처코드
            left outer join MCUSTTB as c  ON c.CUST_CD  = h.CUST_CD

        WHERE 1=1
                AND LEFT(h.DEAL_DAY,6)     =   #{paramYyMm }
            <if test='paramValueNm != null and paramValueNm != ""'>
                AND (   h.CUST_CD LIKE CONCAT( '%', #{paramValueNm }, '%' )
                    OR  h.REMARKS LIKE CONCAT( '%', #{paramValueNm }, '%')
                    OR  c.CUST_NM LIKE CONCAT( '%', #{paramValueNm }, '%')
                    )
            </if>
        order by h.DEAL_DAY desc, h.SEQ desc

    </select>

    <select id="sal2010_list_header" resultType="java.util.HashMap">
        SELECT
               h.DEAL_DAY       as  dealDay
             , h.SEQ            as  seq
             , h.DIV_CD         as  divCd
             , h.CUST_CD        as  custCd
             , c.CUST_NM        as  custNm
             , h.CUSTS_CD       as  custsCd
             , h.CUST_SEQ       as  custSeq
             , d.SUM_CNT		as 	sumCnt
             , d.SUM_QTY  		as 	sumQty
             , d.SUM_AMT   		as	sumAmt
             , d.RECEIPT_YN     as  receiptYn
             , h.REMARKS        as  remarks
             , h.REG_DATE       as  regDate
             , h.REG_ID         as  regId
             , h.UPDATE_DATE    as  updateDate
             , h.UPDATE_ID      as  updateId
        FROM SDEALHTB as h
             -- 출고자료 체크
             left outer join (
                                SELECT DEAL_DAY, SEQ, COUNT(*) AS SUM_CNT, SUM(QTY)as SUM_QTY, SUM(AMT) as SUM_AMT, RECEIPT_YN
                                FROM SDEALDTB
                                WHERE DEAL_DAY   = #{paramDealDay }
                                GROUP BY DEAL_DAY, SEQ
                            ) d ON d.DEAL_DAY = h.DEAL_DAY AND d.SEQ = h.SEQ
            -- 거래처코드
                 left outer join MCUSTTB as c  ON c.CUST_CD  = h.CUST_CD

        WHERE 1=1
          AND h.DEAL_DAY     =   #{paramDealDay }
          AND h.DIV_CD       =   #{paramDivCd }
        ORDER BY h.DEAL_DAY desc, h.SEQ desc

    </select>

    <select id="sal2010_select_header" resultType="java.util.HashMap">
        SELECT
               h.DEAL_DAY           as  dealDay
             , h.SEQ                as  seq
             , h.DIV_CD             as  divCd
             , h.CUST_CD            as  custCd
             , c.CUST_NM            as  custNm
             , h.CUSTS_CD           as  custsCd
             , h.CUST_SEQ           as  custSeq
             , h.REMARKS            as  remarks
             , h.COUP_RETURN_DAY    as  coupReturnDay
             , h.REG_DATE           as  regDate
             , h.REG_ID             as  regId
             , h.UPDATE_DATE        as  updateDate
             , h.UPDATE_ID          as  updateId

             , c.YUL_WT             as  yulWt
             , c.YUL_MJ             as  yulMj
             , c.YUL_HM             as  yulHm
             , c.YUL_NP             as  yulNp
             , c.YUL_TB             as  yulTb
             , c.YUL_HD             as  yulHd
             , c.YUL_HS             as  yulHs
             , c.YUL_SG             as  yulSg
             , c.YUL_GT             as  yulGt
        FROM SDEALHTB as h
                 -- 거래처코드
                 left outer join MCUSTTB as c ON c.CUST_CD  = h.CUST_CD

        where 1=1
          AND h.DEAL_DAY   =   #{paramDealDay }
          AND h.SEQ        =   #{paramSeq }

    </select>

    <select id="sal2010_select_list_details" resultType="java.util.HashMap">
        SELECT
               d.DEAL_DAY           as  dealDay
             , d.SEQ                as  seq
             , d.CNT                as  cnt
             , d.CUST_CD            as  custCd
             , d.CUSTS_CD           as  custsCd
             , d.DIV_CD             as  divCd
             , d.CUST_SEQ           as  custSeq
             , d.DEAL_FG            as  dealFg
             , c1.COMM_NM           as  dealFgNm
             , d.PROD_CD            as  prodCd
             , p.PROD_NM            as  prodNm
             , d.QTY                as  qty
             , d.PRICE              as  price
             , d.AMT                as  amt
             , d.YUL                as  yul
             , d.RETURN_DAY         as  returnDay
             , d.RECEIPT_YN         as  receiptYn
             , d.RECEIPT_DATE       as  receiptDate
             , d.REMARKS            as  remarks
             , d.REG_DATE           as  regDate
             , d.REG_ID             as  regId
             , d.UPDATE_DATE        as  updateDate
             , d.UPDATE_ID          as  updateId
             , 'R'                  as  iuD
        FROM SDEALDTB as d
                 -- 도서코드
                 left outer join MPRODTB as p  ON p.PROD_CD  = d.PROD_CD
                 left outer join MCOMMTB as c1 ON c1.COMM_CD  = d.DEAL_FG

        where 1=1
          AND d.DEAL_DAY   =   #{paramDealDay }
          AND d.SEQ        =   #{paramSeq }

    </select>

    <select id="sal2010_maxSeqCheck" resultType="java.util.HashMap">
        SELECT IFNULL( LPAD(CAST(MAX(SEQ) AS UNSIGNED) + 1, 4, '0'), '0001') as maxSeq
        FROM SDEALHTB
        WHERE DEAL_DAY   =   #{paramDealDay }
    </select>

    <select id="sal2010_cust_seq_check" resultType="java.util.HashMap">
        SELECT
            COUNT(*) + 1    as  custSeq
          FROM SDEALHTB
         WHERE DEAL_DAY     =   #{paramDealDay }
           AND CUST_CD      =   #{paramCustCd }
           AND ifnull(CUSTS_CD,'')    =   ifnull(#{paramCustsCd },'')
    </select>


    <insert id="sal2010_insert_header" parameterType="java.util.Map" useGeneratedKeys="true" keyProperty="seq">
        <selectKey keyProperty="seq" resultType="String" order="BEFORE">
            SELECT IFNULL( LPAD(CAST(MAX(SEQ) AS UNSIGNED) + 1, 4, '0'), '0001') as seq
            FROM SDEALHTB
            WHERE DEAL_DAY   =   #{stdDay}
        </selectKey>
        <foreach collection="list1" item="item" separator=";">
            INSERT INTO SDEALHTB
            (
                  DEAL_DAY
                , SEQ
                , CUST_CD
                , CUSTS_CD
                , DIV_CD
                , CUST_SEQ
                , REMARKS
                , RECEIPT_YN
                , RECEIPT_DATE
                , COUP_RETURN_DAY
                , REG_DATE
                , REG_ID
                , UPDATE_DATE
                , UPDATE_ID
            ) VALUES (
                  #{item.dealDay}
                , #{seq}
                , #{item.custCd}
                , #{item.custsCd}
                , #{item.divCd}
                , #{item.custSeq}
                , #{item.remarks}
                , #{item.receiptYn}
                , #{item.receiptDate}
                , #{item.coupReturnDay}
                , NOW()
                , #{userId}
                , NOW()
                , #{userId}
            )
        </foreach>
    </insert>

    <update id="sal2010_update_header" parameterType="java.util.Map">
        <foreach collection="list1" item="item" separator=";">
            UPDATE SDEALHTB
            SET
                  DEAL_DAY          =   #{item.dealDay}
                , CUST_CD           =   #{item.custCd}
                , CUSTS_CD          =   #{item.custsCd}
                , DIV_CD            =   #{item.divCd}
                , CUST_SEQ          =   #{item.custSeq}
                , REMARKS           =   #{item.remarks}
                , RECEIPT_YN        =   #{item.receiptYn}
                , RECEIPT_DATE      =   #{item.receiptDate}
                , COUP_RETURN_DAY   =   #{item.coupReturnDay}
                , UPDATE_DATE       =   NOW()
                , UPDATE_ID         =   #{userId}
            WHERE DEAL_DAY          =   #{item.dealDay}
              AND SEQ               =   #{item.seq}
        </foreach>
    </update>

    <delete id="sal2010_delete_header" parameterType="java.util.Map">
        <foreach collection="list1" item="item" separator=";">
            DELETE FROM SDEALHTB
            WHERE DEAL_DAY        =   #{item.dealDay}
            AND SEQ               =   #{item.seq}
        </foreach>
    </delete>

    <delete id="sal2010_delete_details_all" parameterType="java.util.Map">
        <foreach collection="list1" item="item" separator=";">
            DELETE FROM SDEALDTB
            WHERE DEAL_DAY    =   #{item.dealDay}
            AND SEQ           =   #{item.seq}
        </foreach>
    </delete>



    <insert id="sal2010_insert_details" parameterType="java.util.Map">
        <foreach collection="list1" item="item" separator=";">
            INSERT INTO SDEALDTB
            (
                  DEAL_DAY
                , SEQ
                , CNT
                , DIV_CD
                , CUST_CD
                , CUSTS_CD
                , DEAL_FG
                , PROD_CD
                , QTY
                , PRICE
                , YUL
                , AMT
                , CUST_SEQ
                , RETURN_DAY
                , REMARKS
                , RECEIPT_YN
                , RECEIPT_DATE
                , REG_DATE
                , REG_ID
                , UPDATE_DATE
                , UPDATE_ID
            ) VALUES (
                  #{item.dealDay}
                , #{item.seq}
                , (SELECT IFNULL(max(a.CNT),0) + 1 as cnt from SDEALDTB a where a.DEAL_DAY = #{item.dealDay} AND a.SEQ = #{item.seq} )
                , #{item.divCd}
                , #{item.custCd}
                , #{item.custsCd}
                , #{item.dealFg}
                , #{item.prodCd}
                , #{item.qty}
                , #{item.price}
                , #{item.yul}
                , #{item.amt}
                , #{item.custSeq}
                , #{item.returnDay}
                , #{item.remarks}
                , #{item.receiptYn}
                , #{item.receiptDate}
                , NOW()
                , #{userId}
                , NOW()
                , #{userId}
            )
        </foreach>
    </insert>

    <update id="sal2010_update_details" parameterType="java.util.Map">
        <foreach collection="list1" item="item" separator=";">
            UPDATE SDEALDTB
            SET
                  DEAL_DAY          =   #{item.dealDay}
                , SEQ               =   #{item.seq}
                , CNT               =   #{item.cnt}
                , DIV_CD            =   #{item.divCd}
                , CUST_CD           =   #{item.custCd}
                , CUSTS_CD          =   #{item.custsCd}
                , DEAL_FG           =   #{item.dealFg}
                , PROD_CD           =   #{item.prodCd}
                , QTY               =   #{item.qty}
                , PRICE             =   #{item.price}
                , YUL               =   #{item.yul}
                , AMT               =   #{item.amt}
                , CUST_SEQ          =   #{item.custSeq}
                , RETURN_DAY        =   #{item.returnDay}
                , REMARKS           =   #{item.remarks}
                , RECEIPT_YN        =   #{item.receiptYn}
                , RECEIPT_DATE      =   #{item.receiptDate}
                , UPDATE_DATE       =   NOW()
                , UPDATE_ID         =   #{userId}
            WHERE DEAL_DAY          =   #{item.dealDay}
            AND SEQ                 =   #{item.seq}
            AND CNT                 =   #{item.cnt}
        </foreach>
    </update>

    <delete id="sal2010_delete_details" parameterType="java.util.Map">
        <foreach collection="list1" item="item" separator=";">
            DELETE FROM SDEALDTB
            WHERE DEAL_DAY        =   #{item.dealDay}
            AND SEQ               =   #{item.seq}
            AND CNT               =   #{item.cnt}
        </foreach>
    </delete>



    <!-- ###  매출전표 코업접수 관리    ################################ -->
    <select id="sal2020_list" resultType="java.util.HashMap">
        SELECT
              ROW_NUMBER() OVER (ORDER BY dh.SEQ asc) as rowNum
            , dd.DEAL_DAY		as	dealDay
            , DATE_FORMAT(dd.DEAL_DAY, '%y/%m/%d') as dealDayX
            , dd.SEQ			as	seq
            , dh.DIV_CD			as	divCd
            , dh.CUST_CD		as	custCd
            , cu.CUST_NM		as	custNm
            , dh.CUSTS_CD		as	custsCd
            , dh.CUST_SEQ		as	custSeq
            , count(dd.SEQ)		as	cnt
            , sum(dd.AMT) 		as	sumAmt
            , dd.RECEIPT_YN     as  receiptYn
            , if(dd.RECEIPT_YN = 'Y', '접수','대기') as receiptYnNm
            , dh.REMARKS		as	remarks
        FROM SDEALDTB as dd
            -- header 체크
            left outer join SDEALHTB as dh ON dh.DEAL_DAY = dd.DEAL_DAY AND dh.SEQ = dd.SEQ
            -- 거래처코드
            left outer join MCUSTTB as cu ON cu.CUST_CD  = dh.CUST_CD

        WHERE 1=1
          AND dd.DEAL_DAY =  #{paramStdDay }
          AND dh.DIV_CD   =   #{paramDivCd }
        <if test='paramValue != null and paramValue != ""'>
            AND (  cu.CUST_NM LIKE CONCAT( '%', #{paramValue }, '%' )
            OR  dh.CUST_CD LIKE CONCAT( '%', #{paramValue }, '%')
            OR  dh.CUSTS_CD LIKE CONCAT( '%', #{paramValue }, '%')
            OR  dh.REMARKS LIKE CONCAT( '%', #{paramValue }, '%')
            )
        </if>
        group by dd.SEQ, dd.RECEIPT_YN
        order by dh.SEQ asc

    </select>

    <select id="sal2020_select_list" resultType="java.util.HashMap">
        SELECT
               ROW_NUMBER() OVER (ORDER BY dh.SEQ asc) as rowNum
             , dd.DEAL_DAY		as	dealDay
             , DATE_FORMAT(dd.DEAL_DAY, '%y/%m/%d') as dealDayX
             , dd.SEQ			as	seq
             , dd.CNT			as	cnt
             , dh.DIV_CD		as	divCd
             , dh.CUST_CD		as	custCd
             , dh.CUSTS_CD		as	custsCd
             , dh.CUST_SEQ		as	custSeq
             , dd.DEAL_FG		as	dealFg
             , RIGHT(dd.DEAL_FG,1)	as	dealFgX
             , c1.COMM_NM		as	dealFgNm
             , dd.PROD_CD		as	prodCd
             , mp.PROD_NM		as	prodNm
             , dd.QTY   		as	qty
             , dd.PRICE			as	price
             , dd.YUL			as	yul
             , dd.AMT			as	amt
             , dd.RETURN_DAY	as	returnDay
             , dd.REMARKS		as	remarksD
             , dh.REMARKS		as	remarksH
             , dd.RECEIPT_YN	as	receiptYn
             , if(dd.RECEIPT_YN = 'Y', '접수','대기') as receiptYnNm
             , dd.RECEIPT_DATE	as	receiptDate
             , DATE_FORMAT(ifnull(dd.RECEIPT_DATE, '00000000'), '%Y-%m-%d (%H:%i)') as  receiptDateFormat
        FROM SDEALDTB as dd
             -- header 체크
                 left outer join SDEALHTB as dh ON dh.DEAL_DAY = dd.DEAL_DAY AND dh.SEQ = dd.SEQ
            -- 공통코드 (401)
                 left outer join MCOMMTB as c1 ON c1.COMM_CD = dd.DEAL_FG
            -- 도서코드
                 left outer join MPRODTB as mp ON mp.PROD_CD  = dd.PROD_CD

        WHERE 1=1
        AND dd.DEAL_DAY     =   #{paramStdDay }
        AND dh.SEQ          =   #{paramSeq }
        AND dd.RECEIPT_YN   =   #{paramReceiptYn }
    </select>

    <update id="sal2020_update_accept" parameterType="java.util.Map">
        <foreach collection="list1" item="item" separator=";">
            UPDATE SDEALDTB
                SET
                      RECEIPT_YN        =   'Y'
                    , RECEIPT_DATE      =   now()

            WHERE DEAL_DAY      =  #{item.dealDay }
              AND SEQ           =  #{item.seq }
              AND CNT           =  #{item.cnt }
        </foreach>
    </update>

    <!-- ###  반품전표체크자료 불러오기    ################################ -->
    <select id="sal2030_return_check_list"  resultType="java.util.HashMap">
        SELECT
               DEAL_DAY         as  dealDay
             , CUST_CD          as  custCd
             , CUSTS_CD         as  custsCd
             , CUST_SEQ         as  custSeq
             , COUP_RETURN_DAY  as  coupReturnDay
        FROM SDEALHTB

        WHERE COUP_RETURN_DAY   =   #{paramDay }       -- 코업반품일 비교
          AND DIV_CD       =   '9'            -- 반품
        GROUP BY CUST_CD, CUSTS_CD, CUST_SEQ

    </select>

    <!-- 출고전표 현황 불러오기  -->
    <select id="sal2110_maxPages" resultType="java.util.HashMap">
        SELECT
              count(*)  as maxPages
            , SUM(QTY)  as  sumQty
            , SUM(AMT)  as  sumAmt
          FROM SDEALDTB  dd
         WHERE 1 = 1
            AND dd.DEAL_DAY   BETWEEN #{paramPeriodFrom } AND #{paramPeriodTo }
            <if test='paramDealFg != null and paramDealFg != ""'>
                AND dd.DEAL_FG = #{paramDealFg }
            </if>
            <if test='paramCustCd != null and paramCustCd != ""'>
                AND dh.CUST_CD = #{paramCustCd }
            </if>
            <if test='paramValue != null and paramValue != ""'>
                AND ( dh.CUST_CD LIKE CONCAT( '%', #{paramValue }, '%' )
                OR  mc.CUST_NM LIKE CONCAT( '%', #{paramValue }, '%')
                OR  dd.REMARKS LIKE CONCAT( '%', #{paramValue }, '%')
                OR  mp.PROD_NM LIKE CONCAT( '%', #{paramValue }, '%')
                )
            </if>
            ORDER BY dd.DEAL_DAY, dd.SEQ, dd.CNT

    </select>

    <select id="sal2110_list" resultType="java.util.HashMap">
        SELECT ROW_NUMBER() OVER (ORDER BY dd.DEAL_DAY, dd.SEQ, dd.CNT) as rowNum
             , dd.DEAL_DAY          as  dealDay
             , dd.SEQ               as  seq
             , dd.CNT               as  cnt
             , dh.CUST_CD           as  custCd
             , mc.CUST_NM           as  custNm
             , dd.CUSTS_CD          as  custsCd
             , dd.DIV_CD            as  divCd
             , dd.CUST_SEQ          as  custSeq
             , dd.DEAL_FG           as  dealFg
             , c1.COMM_NM           as  dealFgNm
             , dd.PROD_CD           as  prodCd
             , mp.PROD_NM           as  prodNm
             , dd.QTY               as  qty
             , dd.PRICE             as  price
             , dd.AMT               as  amt
             , dd.YUL               as  yul
             , dd.RETURN_DAY        as  returnDay
             , dd.RECEIPT_YN        as  receiptYn
             , dd.RECEIPT_DATE      as  receiptDate
             , dd.REMARKS           as  remarks
             , dd.REG_DATE          as  regDate
             , dd.REG_ID            as  regId
             , dd.UPDATE_DATE       as  updateDate
             , dd.UPDATE_ID         as  updateId

        FROM SDEALDTB as dd
                 -- 도서코드
                 left outer join SDEALHTB as dh ON dh.DEAL_DAY  = dd.DEAL_DAY AND dh.SEQ = dd.SEQ
                 left outer join MCUSTTB as mc ON mc.CUST_CD  = dh.CUST_CD
                 left outer join MPRODTB as mp  ON mp.PROD_CD = dd.PROD_CD
                 left outer join MCOMMTB as c1 ON c1.COMM_CD  = dd.DEAL_FG

        where 1=1
          AND dd.DEAL_DAY   BETWEEN #{paramPeriodFrom } AND #{paramPeriodTo }
        <if test='paramDealFg != null and paramDealFg != ""'>
          AND dd.DEAL_FG = #{paramDealFg }
        </if>
        <if test='paramCustCd != null and paramCustCd != ""'>
          AND dh.CUST_CD = #{paramCustCd }
        </if>
        <if test='paramValue != null and paramValue != ""'>
            AND ( dh.CUST_CD LIKE CONCAT( '%', #{paramValue }, '%' )
              OR  mc.CUST_NM LIKE CONCAT( '%', #{paramValue }, '%')
              OR  dd.REMARKS LIKE CONCAT( '%', #{paramValue }, '%')
              OR  mp.PROD_NM LIKE CONCAT( '%', #{paramValue }, '%')
                )
        </if>
        ORDER BY dd.DEAL_DAY, dd.SEQ, dd.CNT
        LIMIT #{paramPageRows} OFFSET #{paramStartRowNum }
    </select>

    <!-- 도서별 입출고원장 불러오기  -->
    <select id="sal2120_list" resultType="java.util.HashMap">
        SET @rownum:=0;

        SELECT b.row_no         as  rowNum
            , b.sale_ym         as  saleYm
            , b.sale_day        as  saleDay
            , b.cust_cd         as  custCd
            , if(b.cust_nm='일계', b.cust_nm, cu1.cust_nm) as custNm
            , b.div_cd          as  divCd
            , b.fg              as  fg
            , b.fg_nm           as  fgNm
            , b.i_qty           as  iQty
            , b.ib_qty          as  ibQty
            , b.o_qty           as  oQty
            , b.oj_qty          as  ojQty
            , b.ob_qty          as  obQty
            , b.ox_qty          as  oxQty
            , b.oz_qty          as  ozQty
            , b.j_qty           as  jQty
            , b.remarks         as  remarks

        FROM (
            SELECT a.row_no
                , (case when a.sale_ym is not null then a.sale_ym else '총계' end)  as  sale_ym
                , (case when a.sale_day is not null then a.sale_day else '월계' end)  as  sale_day
                , a.cust_cd
                , (case when a.row_no is not null then a.cust_nm else '일계' end) as  cust_nm
                , a.div_cd
                , a.fg
                , a.fg_nm
                , sum(a.i_qty)    as  i_qty
                , sum(a.ib_qty)   as  ib_qty
                , sum(a.o_qty)    as  o_qty
                , sum(a.oj_qty)   as  oj_qty
                , sum(a.ob_qty)   as  ob_qty
                , sum(a.ox_qty)   as  ox_qty
                , sum(a.oz_qty)   as  oz_qty
                , (case when a.row_no is not null then @w_qty := @w_qty + (sum(a.i_qty) + sum(a.ib_qty)) - (sum(a.o_qty) + sum(a.oj_qty) + sum(a.ox_qty) + sum(a.oz_qty) - sum(a.ob_qty)) else '0' end)    as j_qty
                , a.remarks

            FROM (
                      SELECT   @rownum:=@rownum+1    as  row_no
                    , '000000'             as  sale_ym
                    , '00000000'           as  sale_day
                    , '0'                  as  io_div
                    , ''                   as  cust_cd
                    , ''                   as  cust_nm
                    , ''                   as  div_cd
                    , ''                   as  fg
                    , ''                   as  fg_nm
                    , 0                    as  i_qty
                    , 0                    as  ib_qty
                    , 0                    as  o_qty
                    , 0                    as  oj_qty
                    , 0                    as  ob_qty
                    , 0                    as  ox_qty
                    , 0                    as  oz_qty
                    , @w_qty := (ifnull(sum(st.I_QTY),0)+ifnull(sum(st.IB_QTY),0))-(ifnull(sum(st.O_QTY),0)+ifnull(sum(st.OJ_QTY),0)+ifnull(sum(st.OX_QTY),0)+ifnull(sum(st.OZ_QTY),0)-ifnull(sum(st.OB_QTY),0)) as j_qty
                    , '' as remarks
                FROM SSTOCKTB st,  (select @w_qty:=0) x

                WHERE st.PROD_CD		=    #{paramProdCd }
                AND st.STOCK_DAY	<![CDATA[<]]> 	#{paramPeriodFrom }

        UNION ALL

            SELECT
                      @rownum:=@rownum+1      as  row_no
                    , left(bi.BUY_DAY,6)   	as  sale_ym
                    , bi.BUY_DAY	            as  sale_day
                    , '1'                     as  io_div
                    , bi.CUST_CD              as  cust_cd
                    , cu.CUST_NM              as  cust_nm
                    , bi.DIV_CD               as  div_cd
                    , bi.BUY_FG	            as  fg
                    , c1.COMM_NM              as  fg_nm
                    , if(bi.BUY_FG = '3021101', bi.QTY, if(bi.BUY_FG = '3021103', bi.QTY,  if(bi.BUY_FG = '3021104', bi.QTY, if(bi.BUY_FG = '3021105', bi.QTY, if(bi.BUY_FG = '3021106', bi.QTY, 0))))) as  i_qty
                    , if(bi.BUY_FG = '3021102', bi.QTY, 0) as  ib_qty
                    , 0                       as  o_qty
                    , 0                       as  oj_qty
                    , 0                       as  ob_qty
                    , 0                       as  ox_qty
                    , 0                       as  oz_qty
                    , 0                       as  j_qty
                    , bi.REMARKS              as  remarks
            FROM SBUYDTB bi

                left outer join MCUSTTB as cu ON cu.CUST_CD = bi.CUST_CD
                left outer join MCOMMTB as c1 ON c1.COMM_CD = bi.BUY_FG

            WHERE bi.PROD_CD =  #{paramProdCd }
              AND bi.BUY_DAY   BETWEEN #{paramPeriodFrom } AND #{paramPeriodTo }

        union all

            SELECT
                      @rownum:=@rownum+1 	as  row_no
                    , left(bo.DEAL_DAY,6) as 	sale_ym
                    , bo.DEAL_DAY  	as 	sale_day
                    , '2' 			as 	io_div
                    , bo.CUST_CD   	as  cust_cd
                    , cu.CUST_NM   	as  cust_nm
                    , bo.DIV_CD    	as  div_cd
                    , bo.DEAL_FG  	as  fg
                    , c1.COMM_NM  	as  fg_nm
                    , 0              as  i_qty
                    , 0              as  ib_qty
                    , if(bo.DIV_CD = '1', if(bo.DEAL_FG = '4021101', bo.QTY, if(bo.DEAL_FG = '4021102', bo.QTY, if(bo.DEAL_FG = '4021103', bo.QTY, if(bo.DEAL_FG = '4021104', bo.QTY, if(bo.DEAL_FG = '4021108', bo.QTY, if(bo.DEAL_FG = '4021109', bo.QTY, 0)))))),0) as  o_qty
                    , if(bo.DIV_CD = '1', if(bo.DEAL_FG = '4021205', bo.QTY, 0),0) as  oj_qty
                    , if(bo.DIV_CD = '9' AND bo.DEAL_FG != '4021980', bo.QTY,0) as  ob_qty
                    , if(bo.DIV_CD = '1', if(bo.DEAL_FG = '4021990', bo.QTY, 0),0) as  ox_qty
                    , if(bo.DEAL_FG = '4021980', if(bo.DIV_CD = '1', bo.QTY, 0-bo.QTY),0) as  oz_qty
                    , 0        		    as  j_qty
                    , bo.REMARKS     	as  remarks
                FROM SDEALDTB bo

                    left outer join MCUSTTB as cu ON cu.CUST_CD 	= 	bo.CUST_CD
                    left outer join MCOMMTB as c1 ON c1.COMM_CD	= 	bo.DEAL_FG

                WHERE bo.PROD_CD =  #{paramProdCd }
                AND bo.DEAL_DAY   BETWEEN #{paramPeriodFrom } AND #{paramPeriodTo }

            ) a,  (select @w_qty:=0) y

                    group by a.sale_ym, a.sale_day, a.row_no
                    with rollup

        ) b

            left outer join MCUSTTB as cu1 ON cu1.cust_cd = b.cust_cd

            where 1=1

              and  !(b.sale_ym = '000000' and b.sale_day = '00000000' and b.cust_nm ='일계')
              and  !(b.sale_ym = '000000' and b.sale_day = '월계')
    </select>

</mapper>