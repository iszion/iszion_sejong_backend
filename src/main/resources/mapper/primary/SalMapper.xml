<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.iszion.api.sal.dao.SalDAO">

    <!-- ###  매입전표관리    ################################ -->
    <select id="sal1010_list_event" resultType="java.util.HashMap">
        SELECT
                i.BUY_DAY               as  eventDay
          FROM SBUYHTB i
         WHERE 1=1
            AND SUBSTRING(i.BUY_DAY, 1, 4) =  #{paramYear}
            AND SUBSTRING(i.BUY_DAY, 5, 2) = #{paramMonth}
         GROUP BY i.BUY_DAY

    </select>

    <select id="sal1010_list_search" resultType="java.util.HashMap">
        SELECT
               ih.BUY_DAY           as  buyDay
             , ih.SEQ               as  seq
             , ih.CUST_CD           as  custCd
             , ih.DIV_CD            as  divCd
             , cu.CUST_NM           as  custNm
             , IFNULL(id.TOT_SEQ,0) as  totSeq
             , IFNULL(id.TOT_QTY,0) as  totQty
             , ih.REMARKS           as  remarks
             , ih.REG_DATE          as  regDate
             , ih.REG_ID            as  regId
             , ih.UPDATE_DATE       as  updateDate
             , ih.UPDATE_ID         as  updateId
        FROM SBUYHTB as ih
             -- 입고 아이템 체크
             left outer join (
                                SELECT BUY_DAY, SEQ, COUNT(*) as TOT_SEQ, SUM(QTY) as TOT_QTY
                                    FROM SBUYDTB where LEFT(BUY_DAY,6)   = #{paramYyMm }
                                    GROUP BY BUY_DAY, SEQ
                            ) id ON id.BUY_DAY = ih.BUY_DAY AND id.SEQ = ih.SEQ

            -- 거래처코드
             left outer join MCUSTTB as cu ON cu.CUST_CD  = ih.CUST_CD

        where 1=1
          AND LEFT(ih.BUY_DAY,6)     =   #{paramYyMm }
        <if test='paramValueNm != null and paramValueNm != ""'>
            AND (     ih.CUST_CD LIKE CONCAT( '%', #{paramValueNm }, '%' )
                  OR  ih.REMARKS LIKE CONCAT( '%', #{paramValueNm }, '%')
                  OR  cu.CUST_NM LIKE CONCAT( '%', #{paramValueNm }, '%')
                 )
        </if>
        order by ih.BUY_DAY desc, ih.SEQ desc

    </select>

    <select id="sal1010_list_header" resultType="java.util.HashMap">
        SELECT
               ih.BUY_DAY           as  buyDay
             , ih.SEQ               as  seq
             , ih.CUST_CD           as  custCd
             , ih.DIV_CD            as  divCd
             , cu.CUST_NM           as  custNm
             , IFNULL(id.TOT_SEQ,0) as  totSeq
             , IFNULL(id.TOT_QTY,0) as  totQty
             , ih.REMARKS           as  remarks
             , ih.REG_DATE          as  regDate
             , ih.REG_ID            as  regId
             , ih.UPDATE_DATE       as  updateDate
             , ih.UPDATE_ID         as  updateId
        FROM SBUYHTB as ih
             -- 입고 아이템 체크
             left outer join (
                                SELECT SEQ, COUNT(*) as TOT_SEQ, SUM(QTY) as TOT_QTY
                                    FROM SBUYDTB where BUY_DAY   = #{paramBuyDay }
                                    GROUP BY SEQ
                            ) id ON id.SEQ = ih.SEQ

            -- 거래처코드
             left outer join MCUSTTB as cu ON cu.CUST_CD  = ih.CUST_CD

        where 1=1
          AND ih.BUY_DAY     =   #{paramBuyDay }
        order by ih.BUY_DAY desc, ih.SEQ desc

    </select>

    <select id="sal1010_select_header" resultType="java.util.HashMap">
        SELECT
               ih.BUY_DAY           as  buyDay
             , ih.SEQ               as  seq
             , ih.CUST_CD           as  custCd
             , ih.DIV_CD            as  divCd
             , cu.CUST_NM           as  custNm
             , ih.REMARKS           as  remarks
             , ih.REG_DATE          as  regDate
             , ih.REG_ID            as  regId
             , ih.UPDATE_DATE       as  updateDate
             , ih.UPDATE_ID         as  updateId
        FROM SBUYHTB as ih
            -- 거래처코드
             left outer join MCUSTTB as cu ON cu.CUST_CD  = ih.CUST_CD

        where 1=1
          AND ih.BUY_DAY    =   #{paramBuyDay }
          AND ih.SEQ        =   #{paramSeq }

    </select>

    <select id="sal1010_select_list_details" resultType="java.util.HashMap">
        SELECT
               id.BUY_DAY           as  buyDay
             , id.SEQ               as  seq
             , id.CNT               as  cnt
             , id.CUST_CD           as  custCd
             , id.DIV_CD            as  divCd
             , id.BUY_FG            as  buyFg
             , c1.COMM_NM           as  buyFgNm
             , id.PROD_CD           as  prodCd
             , pd.PROD_NM           as  prodNm
             , id.QTY               as  qty
             , id.PRICE             as  price
             , id.AMT               as  amt
             , id.BUY_YUL           as  buyYul
             , id.REMARKS           as  remarks
             , id.REG_DATE          as  regDate
             , id.REG_ID            as  regId
             , id.UPDATE_DATE       as  updateDate
             , id.UPDATE_ID         as  updateId
             , 'R'                  as  iuD
        FROM SBUYDTB as id
            -- 거래처코드
             left outer join MPRODTB as pd ON pd.PROD_CD  = id.PROD_CD
             left outer join MCOMMTB as c1 ON c1.COMM_CD  = id.BUY_FG

        where 1=1
          AND id.BUY_DAY    =   #{paramBuyDay }
          AND id.SEQ        =   #{paramSeq }

    </select>

    <select id="sal1010_maxSeqCheck" resultType="java.util.HashMap">
        SELECT IFNULL( LPAD(CAST(MAX(SEQ) AS UNSIGNED) + 1, 4, '0'), '0001') as maxSeq
         FROM SBUYHTB
        WHERE BUY_DAY   =   #{paramBuyDay }
    </select>


    <insert id="sal1010_insert_header" parameterType="java.util.Map" useGeneratedKeys="true" keyProperty="seq">
        <selectKey keyProperty="seq" resultType="String" order="BEFORE">
            SELECT IFNULL( LPAD(CAST(MAX(SEQ) AS UNSIGNED) + 1, 4, '0'), '0001') as seq
              FROM SBUYHTB
             WHERE BUY_DAY   =   #{stdDay}
        </selectKey>
        <foreach collection="list1" item="item" separator=";">
            INSERT INTO SBUYHTB
                (
                      BUY_DAY
                    , SEQ
                    , CUST_CD
                    , DIV_CD
                    , REMARKS
                    , REG_DATE
                    , REG_ID
                    , UPDATE_DATE
                    , UPDATE_ID
                ) VALUES (
                      #{item.buyDay}
                    , #{seq}
                    , #{item.custCd}
                    , #{item.divCd}
                    , #{item.remarks}
                    , NOW()
                    , #{userId}
                    , NOW()
                    , #{userId}
                )
        </foreach>
    </insert>

    <update id="sal1010_update_header" parameterType="java.util.Map">
        <foreach collection="list1" item="item" separator=";">
            UPDATE SBUYHTB
                SET
                      CUST_CD       =   #{item.custCd}
                    , DIV_CD        =   #{item.divCdCd}
                    , REMARKS       =   #{item.remarks}
                    , UPDATE_DATE   =   NOW()
                    , UPDATE_ID     =   #{userId}
            WHERE BUY_DAY           =   #{item.buyDay}
              AND SEQ               =   #{item.seq}
        </foreach>
    </update>

    <delete id="sal1010_delete_header" parameterType="java.util.Map">
        <foreach collection="list1" item="item" separator=";">
            DELETE FROM SBUYHTB
             WHERE BUY_DAY           =   #{item.buyDay}
               AND SEQ               =   #{item.seq}
        </foreach>
    </delete>

    <delete id="sal1010_delete_details_all" parameterType="java.util.Map">
        <foreach collection="list1" item="item" separator=";">
            DELETE FROM SBUYDTB
            WHERE BUY_DAY       =   #{item.buyDay}
              AND SEQ           =   #{item.seq}
        </foreach>
    </delete>



    <insert id="sal1010_insert_details" parameterType="java.util.Map">
        <foreach collection="list1" item="item" separator=";">
            INSERT INTO SBUYDTB
                (
                      BUY_DAY
                    , SEQ
                    , CNT
                    , CUST_CD
                    , DIV_CD
                    , BUY_FG
                    , PROD_CD
                    , QTY
                    , PRICE
                    , AMT
                    , BUY_YUL
                    , REMARKS
                    , REG_DATE
                    , REG_ID
                    , UPDATE_DATE
                    , UPDATE_ID
                ) VALUES (
                      #{item.buyDay}
                    , #{item.seq}
                    , (SELECT IFNULL(max(a.CNT),0) + 1 as cnt from SBUYDTB a where a.BUY_DAY = #{item.buyDay} AND a.SEQ = #{item.seq} )
                    , #{item.custCd}
                    , #{item.divCd}
                    , #{item.buyFg}
                    , #{item.prodCd}
                    , #{item.qty}
                    , #{item.price}
                    , #{item.amt}
                    , #{item.buyYul}
                    , #{item.remarks}
                    , NOW()
                    , #{userId}
                    , NOW()
                    , #{userId}
                )
        </foreach>
    </insert>

    <update id="sal1010_update_details" parameterType="java.util.Map">
        <foreach collection="list1" item="item" separator=";">
            UPDATE SBUYDTB
                SET
                      CUST_CD       =   #{item.custCd}
                    , DIV_CD        =   #{item.divCd}
                    , BUY_FG        =   #{item.buyFg}
                    , PROD_CD       =   #{item.prodCd}
                    , QTY           =   #{item.qty}
                    , PRICE         =   #{item.price}
                    , AMT           =   #{item.amt}
                    , BUY_YUL       =   #{item.buyYul}
                    , REMARKS       =   #{item.remarks}
                    , UPDATE_DATE   =   NOW()
                    , UPDATE_ID     =   #{userId}
            WHERE BUY_DAY           =   #{item.buyDay}
              AND SEQ               =   #{item.seq}
              AND CNT               =   #{item.cnt}
        </foreach>
    </update>

    <delete id="sal1010_delete_details" parameterType="java.util.Map">
        <foreach collection="list1" item="item" separator=";">
            DELETE FROM SBUYDTB
             WHERE BUY_DAY           =   #{item.buyDay}
               AND SEQ               =   #{item.seq}
               AND CNT               =   #{item.cnt}
        </foreach>
    </delete>

    <!-- ###  매입전표현황    ################################ -->
    <select id="sal1020_list" resultType="java.util.HashMap">
        SELECT
               ROWNUM()             as  rowNum
             , id.BUY_DAY           as  buyDay
             , id.SEQ               as  seq
             , id.CNT               as  cnt
             , id.CUST_CD           as  custCd
             , cu.CUST_NM           as  custNm
             , id.DIV_CD            as  divCd
             , id.BUY_FG            as  buyFg
             , c1.COMM_NM           as  buyFgNm
             , id.PROD_CD           as  prodCd
             , pd.PROD_NM           as  prodNm
             , SUM(id.QTY)          as  qty
             , id.PRICE             as  price
             , SUM(id.AMT)          as  amt
             , id.BUY_YUL           as  buyYul
             , id.REMARKS           as  remarks
        FROM SBUYDTB as id
                 -- 거래처코드
                 left outer join MCUSTTB as cu ON cu.CUST_CD  = id.CUST_CD
                 left outer join MPRODTB as pd ON pd.PROD_CD  = id.PROD_CD
                 left outer join MCOMMTB as c1 ON c1.COMM_CD  = id.BUY_FG

        where 1=1
          AND id.BUY_DAY  BETWEEN #{paramBuyDayFrom } AND  #{paramBuyDayTo }
        <if test='paramBuyFg != null and paramBuyFg != ""'>
            AND id.BUY_FG   =   #{paramBuyFg }
        </if>
        <if test='paramValue != null and paramValue != ""'>
            AND (     cu.CUST_CD LIKE CONCAT( '%', #{paramValue }, '%' )
                  OR  id.REMARKS LIKE CONCAT( '%', #{paramValue }, '%')
                  OR  cu.CUST_NM LIKE CONCAT( '%', #{paramValue }, '%')
                  OR  id.PROD_CD LIKE CONCAT( '%', #{paramValue }, '%')
                  OR  pd.PROD_NM LIKE CONCAT( '%', #{paramValue }, '%')
                )
        </if>
        GROUP BY id.BUY_DAY, id.SEQ, id.CNT
        WITH ROLLUP

    </select>


    <!-- ###  매출전표 관리    ################################ -->
    <select id="sal2010_list_event" resultType="java.util.HashMap">
        SELECT
            h.DEAL_DAY               as  eventDay
        FROM SDEALHTB h
        WHERE 1=1
          AND SUBSTRING(h.DEAL_DAY, 1, 4) =  #{paramYear}
          AND SUBSTRING(h.DEAL_DAY, 5, 2) = #{paramMonth}
        GROUP BY h.DEAL_DAY

    </select>

    <select id="sal2010_list_search" resultType="java.util.HashMap">
        SELECT
                  h.DEAL_DAY        as  dealDay
                , h.SEQ             as  seq
                , h.DIV_CD          as  divCd
                , h.CUST_CD         as  custCd
                , c.CUST_NM         as  custNm
                , h.CUSTS_CD        as  custsCd
                , h.CUST_SEQ        as  custSeq
                , d.SUM_CNT		    as 	sumCnt
                , d.SUM_QTY  		as 	sumQty
                , d.SUM_AMT   		as	sumAmt
                , d.RECEIPT_YN      as  receiptYn
                , h.REMARKS         as  remarks
                , h.REG_DATE        as  regDate
                , h.REG_ID          as  regId
                , h.UPDATE_DATE     as  updateDate
                , h.UPDATE_ID       as  updateId
        FROM SDEALHTB as h

            -- 출고자료 체크
            left outer join (
                                SELECT DEAL_DAY, SEQ, COUNT(*) AS SUM_CNT, SUM(QTY)as SUM_QTY, SUM(AMT) as SUM_AMT, RECEIPT_YN
                                  FROM SDEALDTB
                                  WHERE LEFT(DEAL_DAY,6)   = #{paramYyMm }
                                  GROUP BY DEAL_DAY, SEQ
                            ) d ON d.DEAL_DAY = h.DEAL_DAY AND d.SEQ = h.SEQ
            -- 거래처코드
            left outer join MCUSTTB as c  ON c.CUST_CD  = h.CUST_CD

        WHERE 1=1
                AND LEFT(h.DEAL_DAY,6)     =   #{paramYyMm }
            <if test='paramValueNm != null and paramValueNm != ""'>
                AND (   h.CUST_CD LIKE CONCAT( '%', #{paramValueNm }, '%' )
                    OR  h.REMARKS LIKE CONCAT( '%', #{paramValueNm }, '%')
                    OR  c.CUST_NM LIKE CONCAT( '%', #{paramValueNm }, '%')
                    )
            </if>
        order by h.DEAL_DAY desc, h.SEQ desc

    </select>

    <select id="sal2010_list_header" resultType="java.util.HashMap">
        SELECT
               h.DEAL_DAY       as  dealDay
             , h.SEQ            as  seq
             , h.DIV_CD         as  divCd
             , h.CUST_CD        as  custCd
             , c.CUST_NM        as  custNm
             , h.CUSTS_CD       as  custsCd
             , h.CUST_SEQ       as  custSeq
             , d.SUM_CNT		as 	sumCnt
             , d.SUM_QTY  		as 	sumQty
             , d.SUM_AMT   		as	sumAmt
             , d.RECEIPT_YN     as  receiptYn
             , h.REMARKS        as  remarks
             , h.REG_DATE       as  regDate
             , h.REG_ID         as  regId
             , h.UPDATE_DATE    as  updateDate
             , h.UPDATE_ID      as  updateId
        FROM SDEALHTB as h
             -- 출고자료 체크
             left outer join (
                                SELECT DEAL_DAY, SEQ, COUNT(*) AS SUM_CNT, SUM(QTY)as SUM_QTY, SUM(AMT) as SUM_AMT, RECEIPT_YN
                                FROM SDEALDTB
                                WHERE DEAL_DAY   = #{paramDealDay }
                                GROUP BY DEAL_DAY, SEQ
                            ) d ON d.DEAL_DAY = h.DEAL_DAY AND d.SEQ = h.SEQ
            -- 거래처코드
                 left outer join MCUSTTB as c  ON c.CUST_CD  = h.CUST_CD

        WHERE 1=1
          AND h.DEAL_DAY     =   #{paramDealDay }
          AND h.DIV_CD       =   #{paramDivCd }
        ORDER BY h.DEAL_DAY desc, h.SEQ desc

    </select>

    <select id="sal2010_select_header" resultType="java.util.HashMap">
        SELECT
               h.DEAL_DAY           as  dealDay
             , h.SEQ                as  seq
             , h.DIV_CD             as  divCd
             , h.CUST_CD            as  custCd
             , c.CUST_NM            as  custNm
             , h.CUSTS_CD           as  custsCd
             , h.CUST_SEQ           as  custSeq
             , h.REMARKS            as  remarks
             , h.COUP_RETURN_DAY    as  coupReturnDay
             , h.REG_DATE           as  regDate
             , h.REG_ID             as  regId
             , h.UPDATE_DATE        as  updateDate
             , h.UPDATE_ID          as  updateId

             , c.YUL_WT             as  yulWt
             , c.YUL_MJ             as  yulMj
             , c.YUL_HM             as  yulHm
             , c.YUL_NP             as  yulNp
             , c.YUL_TB             as  yulTb
             , c.YUL_HD             as  yulHd
             , c.YUL_HS             as  yulHs
             , c.YUL_SG             as  yulSg
             , c.YUL_GT             as  yulGt
        FROM SDEALHTB as h
                 -- 거래처코드
                 left outer join MCUSTTB as c ON c.CUST_CD  = h.CUST_CD

        where 1=1
          AND h.DEAL_DAY   =   #{paramDealDay }
          AND h.SEQ        =   #{paramSeq }

    </select>

    <select id="sal2010_select_list_details" resultType="java.util.HashMap">
        SELECT
               d.DEAL_DAY           as  dealDay
             , d.SEQ                as  seq
             , d.CNT                as  cnt
             , d.CUST_CD            as  custCd
             , d.CUSTS_CD           as  custsCd
             , d.DIV_CD             as  divCd
             , d.CUST_SEQ           as  custSeq
             , d.DEAL_FG            as  dealFg
             , c1.COMM_NM           as  dealFgNm
             , d.PROD_CD            as  prodCd
             , p.PROD_NM            as  prodNm
             , d.QTY                as  qty
             , d.PRICE              as  price
             , d.AMT                as  amt
             , d.YUL                as  yul
             , d.RETURN_DAY         as  returnDay
             , d.RECEIPT_YN         as  receiptYn
             , d.RECEIPT_DATE       as  receiptDate
             , d.REMARKS            as  remarks
             , d.REG_DATE           as  regDate
             , d.REG_ID             as  regId
             , d.UPDATE_DATE        as  updateDate
             , d.UPDATE_ID          as  updateId
             , 'R'                  as  iuD
        FROM SDEALDTB as d
                 -- 도서코드
                 left outer join MPRODTB as p  ON p.PROD_CD  = d.PROD_CD
                 left outer join MCOMMTB as c1 ON c1.COMM_CD  = d.DEAL_FG

        where 1=1
          AND d.DEAL_DAY   =   #{paramDealDay }
          AND d.SEQ        =   #{paramSeq }

    </select>

    <select id="sal2010_maxSeqCheck" resultType="java.util.HashMap">
        SELECT IFNULL( LPAD(CAST(MAX(SEQ) AS UNSIGNED) + 1, 4, '0'), '0001') as maxSeq
        FROM SDEALHTB
        WHERE DEAL_DAY   =   #{paramDealDay }
    </select>

    <select id="sal2010_cust_seq_check" resultType="java.util.HashMap">
        SELECT
            COUNT(*) + 1    as  custSeq
          FROM SDEALHTB
         WHERE DEAL_DAY     =   #{paramDealDay }
           AND CUST_CD      =   #{paramCustCd }
           AND ifnull(CUSTS_CD,'')    =   ifnull(#{paramCustsCd },'')
    </select>


    <insert id="sal2010_insert_header" parameterType="java.util.Map" useGeneratedKeys="true" keyProperty="seq">
        <selectKey keyProperty="seq" resultType="String" order="BEFORE">
            SELECT IFNULL( LPAD(CAST(MAX(SEQ) AS UNSIGNED) + 1, 4, '0'), '0001') as seq
            FROM SDEALHTB
            WHERE DEAL_DAY   =   #{stdDay}
        </selectKey>
        <foreach collection="list1" item="item" separator=";">
            INSERT INTO SDEALHTB
            (
                  DEAL_DAY
                , SEQ
                , CUST_CD
                , CUSTS_CD
                , DIV_CD
                , CUST_SEQ
                , REMARKS
                , RECEIPT_YN
                , RECEIPT_DATE
                , COUP_RETURN_DAY
                , REG_DATE
                , REG_ID
                , UPDATE_DATE
                , UPDATE_ID
            ) VALUES (
                  #{item.dealDay}
                , #{seq}
                , #{item.custCd}
                , #{item.custsCd}
                , #{item.divCd}
                , #{item.custSeq}
                , #{item.remarks}
                , #{item.receiptYn}
                , #{item.receiptDate}
                , #{item.coupReturnDay}
                , NOW()
                , #{userId}
                , NOW()
                , #{userId}
            )
        </foreach>
    </insert>

    <update id="sal2010_update_header" parameterType="java.util.Map">
        <foreach collection="list1" item="item" separator=";">
            UPDATE SDEALHTB
            SET
                  DEAL_DAY          =   #{item.dealDay}
                , CUST_CD           =   #{item.custCd}
                , CUSTS_CD          =   #{item.custsCd}
                , DIV_CD            =   #{item.divCd}
                , CUST_SEQ          =   #{item.custSeq}
                , REMARKS           =   #{item.remarks}
                , RECEIPT_YN        =   #{item.receiptYn}
                , RECEIPT_DATE      =   #{item.receiptDate}
                , COUP_RETURN_DAY   =   #{item.coupReturnDay}
                , UPDATE_DATE       =   NOW()
                , UPDATE_ID         =   #{userId}
            WHERE DEAL_DAY          =   #{item.dealDay}
              AND SEQ               =   #{item.seq}
        </foreach>
    </update>

    <delete id="sal2010_delete_header" parameterType="java.util.Map">
        <foreach collection="list1" item="item" separator=";">
            DELETE FROM SDEALHTB
            WHERE DEAL_DAY        =   #{item.dealDay}
            AND SEQ               =   #{item.seq}
        </foreach>
    </delete>

    <delete id="sal2010_delete_details_all" parameterType="java.util.Map">
        <foreach collection="list1" item="item" separator=";">
            DELETE FROM SDEALDTB
            WHERE DEAL_DAY    =   #{item.dealDay}
            AND SEQ           =   #{item.seq}
        </foreach>
    </delete>



    <insert id="sal2010_insert_details" parameterType="java.util.Map">
        <foreach collection="list1" item="item" separator=";">
            INSERT INTO SDEALDTB
            (
                  DEAL_DAY
                , SEQ
                , CNT
                , DIV_CD
                , CUST_CD
                , CUSTS_CD
                , DEAL_FG
                , PROD_CD
                , QTY
                , PRICE
                , YUL
                , AMT
                , CUST_SEQ
                , RETURN_DAY
                , REMARKS
                , RECEIPT_YN
                , RECEIPT_DATE
                , REG_DATE
                , REG_ID
                , UPDATE_DATE
                , UPDATE_ID
            ) VALUES (
                  #{item.dealDay}
                , #{item.seq}
                , (SELECT IFNULL(max(a.CNT),0) + 1 as cnt from SDEALDTB a where a.DEAL_DAY = #{item.dealDay} AND a.SEQ = #{item.seq} )
                , #{item.divCd}
                , #{item.custCd}
                , #{item.custsCd}
                , #{item.dealFg}
                , #{item.prodCd}
                , #{item.qty}
                , #{item.price}
                , #{item.yul}
                , #{item.amt}
                , #{item.custSeq}
                , #{item.returnDay}
                , #{item.remarks}
                , #{item.receiptYn}
                , #{item.receiptDate}
                , NOW()
                , #{userId}
                , NOW()
                , #{userId}
            )
        </foreach>
    </insert>

    <update id="sal2010_update_details" parameterType="java.util.Map">
        <foreach collection="list1" item="item" separator=";">
            UPDATE SDEALDTB
            SET
                  DEAL_DAY          =   #{item.dealDay}
                , SEQ               =   #{item.seq}
                , CNT               =   #{item.cnt}
                , DIV_CD            =   #{item.divCd}
                , CUST_CD           =   #{item.custCd}
                , CUSTS_CD          =   #{item.custsCd}
                , DEAL_FG           =   #{item.dealFg}
                , PROD_CD           =   #{item.prodCd}
                , QTY               =   #{item.qty}
                , PRICE             =   #{item.price}
                , YUL               =   #{item.yul}
                , AMT               =   #{item.amt}
                , CUST_SEQ          =   #{item.custSeq}
                , RETURN_DAY        =   #{item.returnDay}
                , REMARKS           =   #{item.remarks}
                , RECEIPT_YN        =   #{item.receiptYn}
                , RECEIPT_DATE      =   #{item.receiptDate}
                , UPDATE_DATE       =   NOW()
                , UPDATE_ID         =   #{userId}
            WHERE DEAL_DAY          =   #{item.dealDay}
            AND SEQ                 =   #{item.seq}
            AND CNT                 =   #{item.cnt}
        </foreach>
    </update>

    <delete id="sal2010_delete_details" parameterType="java.util.Map">
        <foreach collection="list1" item="item" separator=";">
            DELETE FROM SDEALDTB
            WHERE DEAL_DAY        =   #{item.dealDay}
            AND SEQ               =   #{item.seq}
            AND CNT               =   #{item.cnt}
        </foreach>
    </delete>



    <!-- ###  매출전표 코업접수 관리    ################################ -->
    <select id="sal2020_list" resultType="java.util.HashMap">
        SELECT
              ROW_NUMBER() OVER (ORDER BY dh.SEQ asc) as rowNum
            , dd.DEAL_DAY		as	dealDay
            , DATE_FORMAT(dd.DEAL_DAY, '%y/%m/%d') as dealDayX
            , dd.SEQ			as	seq
            , dh.DIV_CD			as	divCd
            , dh.CUST_CD		as	custCd
            , cu.CUST_NM		as	custNm
            , dh.CUSTS_CD		as	custsCd
            , dh.CUST_SEQ		as	custSeq
            , count(dd.SEQ)		as	cnt
            , sum(dd.AMT) 		as	sumAmt
            , dd.RECEIPT_YN     as  receiptYn
            , if(dd.RECEIPT_YN = 'Y', '접수','대기') as receiptYnNm
            , dh.REMARKS		as	remarks
        FROM SDEALDTB as dd
            -- header 체크
            left outer join SDEALHTB as dh ON dh.DEAL_DAY = dd.DEAL_DAY AND dh.SEQ = dd.SEQ
            -- 거래처코드
            left outer join MCUSTTB as cu ON cu.CUST_CD  = dh.CUST_CD

        WHERE 1=1
          AND dd.DEAL_DAY =  #{paramStdDay }
          AND dh.DIV_CD   =   #{paramDivCd }
        <if test='paramValue != null and paramValue != ""'>
            AND (  cu.CUST_NM LIKE CONCAT( '%', #{paramValue }, '%' )
            OR  dh.CUST_CD LIKE CONCAT( '%', #{paramValue }, '%')
            OR  dh.CUSTS_CD LIKE CONCAT( '%', #{paramValue }, '%')
            OR  dh.REMARKS LIKE CONCAT( '%', #{paramValue }, '%')
            )
        </if>
        group by dd.SEQ, dd.RECEIPT_YN
        order by dh.SEQ asc

    </select>

    <select id="sal2020_select_list" resultType="java.util.HashMap">
        SELECT
               ROW_NUMBER() OVER (ORDER BY dh.SEQ asc) as rowNum
             , dd.DEAL_DAY		as	dealDay
             , DATE_FORMAT(dd.DEAL_DAY, '%y/%m/%d') as dealDayX
             , dd.SEQ			as	seq
             , dd.CNT			as	cnt
             , dh.DIV_CD		as	divCd
             , dh.CUST_CD		as	custCd
             , dh.CUSTS_CD		as	custsCd
             , dh.CUST_SEQ		as	custSeq
             , dd.DEAL_FG		as	dealFg
             , RIGHT(dd.DEAL_FG,1)	as	dealFgX
             , c1.COMM_NM		as	dealFgNm
             , dd.PROD_CD		as	prodCd
             , mp.PROD_NM		as	prodNm
             , dd.QTY   		as	qty
             , dd.PRICE			as	price
             , dd.YUL			as	yul
             , dd.AMT			as	amt
             , dd.RETURN_DAY	as	returnDay
             , dd.REMARKS		as	remarksD
             , dh.REMARKS		as	remarksH
             , dd.RECEIPT_YN	as	receiptYn
             , if(dd.RECEIPT_YN = 'Y', '접수','대기') as receiptYnNm
             , dd.RECEIPT_DATE	as	receiptDate
             , DATE_FORMAT(ifnull(dd.RECEIPT_DATE, '00000000'), '%Y-%m-%d (%H:%i)') as  receiptDateFormat
        FROM SDEALDTB as dd
             -- header 체크
                 left outer join SDEALHTB as dh ON dh.DEAL_DAY = dd.DEAL_DAY AND dh.SEQ = dd.SEQ
            -- 공통코드 (401)
                 left outer join MCOMMTB as c1 ON c1.COMM_CD = dd.DEAL_FG
            -- 도서코드
                 left outer join MPRODTB as mp ON mp.PROD_CD  = dd.PROD_CD

        WHERE 1=1
        AND dd.DEAL_DAY     =   #{paramStdDay }
        AND dh.SEQ          =   #{paramSeq }
        AND dd.RECEIPT_YN   =   #{paramReceiptYn }
    </select>

    <update id="sal2020_update_accept" parameterType="java.util.Map">
        <foreach collection="list1" item="item" separator=";">
            UPDATE SDEALDTB
                SET
                      RECEIPT_YN        =   'Y'
                    , RECEIPT_DATE      =   now()

            WHERE DEAL_DAY      =  #{item.dealDay }
              AND SEQ           =  #{item.seq }
              AND CNT           =  #{item.cnt }
        </foreach>
    </update>

    <!-- ###  반품전표체크자료 불러오기    ################################ -->
    <select id="sal2030_return_check_list"  resultType="java.util.HashMap">
        SELECT
               DEAL_DAY         as  dealDay
             , CUST_CD          as  custCd
             , CUSTS_CD         as  custsCd
             , CUST_SEQ         as  custSeq
             , COUP_RETURN_DAY  as  coupReturnDay
        FROM SDEALHTB

        WHERE COUP_RETURN_DAY   =   #{paramDay }       -- 코업반품일 비교
          AND DIV_CD       =   '9'            -- 반품
        GROUP BY CUST_CD, CUSTS_CD, CUST_SEQ

    </select>

    <!-- 출고전표 현황 불러오기  -->
    <select id="sal2110_maxPages" resultType="java.util.HashMap">
        SELECT
              count(*)  as maxPages
            , SUM(QTY)  as  sumQty
            , SUM(AMT)  as  sumAmt
          FROM SDEALDTB  dd
            -- 도서코드
            left outer join SDEALHTB as dh ON dh.DEAL_DAY  = dd.DEAL_DAY AND dh.SEQ = dd.SEQ
            left outer join MCUSTTB as mc ON mc.CUST_CD  = dh.CUST_CD
            left outer join MPRODTB as mp  ON mp.PROD_CD = dd.PROD_CD
            left outer join MCOMMTB as c1 ON c1.COMM_CD  = dd.DEAL_FG

        WHERE 1 = 1
            AND dd.DEAL_DAY   BETWEEN #{paramPeriodFrom } AND #{paramPeriodTo }
            <if test='paramDealFg != null and paramDealFg != ""'>
                AND dd.DEAL_FG = #{paramDealFg }
            </if>
            <if test='paramCustCd != null and paramCustCd != ""'>
                AND dh.CUST_CD = #{paramCustCd }
            </if>
            <if test='paramValue != null and paramValue != ""'>
                AND ( dh.CUST_CD LIKE CONCAT( '%', #{paramValue }, '%' )
                OR  mc.CUST_NM LIKE CONCAT( '%', #{paramValue }, '%')
                OR  dd.REMARKS LIKE CONCAT( '%', #{paramValue }, '%')
                OR  mp.PROD_NM LIKE CONCAT( '%', #{paramValue }, '%')
                )
            </if>
            ORDER BY dd.DEAL_DAY, dd.SEQ, dd.CNT

    </select>

    <select id="sal2110_list" resultType="java.util.HashMap">
        SELECT ROW_NUMBER() OVER (ORDER BY dd.DEAL_DAY, dd.SEQ, dd.CNT) as rowNum
             , dd.DEAL_DAY          as  dealDay
             , dd.SEQ               as  seq
             , dd.CNT               as  cnt
             , dh.CUST_CD           as  custCd
             , mc.CUST_NM           as  custNm
             , dd.CUSTS_CD          as  custsCd
             , dd.DIV_CD            as  divCd
             , dd.CUST_SEQ          as  custSeq
             , dd.DEAL_FG           as  dealFg
             , c1.COMM_NM           as  dealFgNm
             , dd.PROD_CD           as  prodCd
             , mp.PROD_NM           as  prodNm
             , dd.QTY               as  qty
             , dd.PRICE             as  price
             , dd.AMT               as  amt
             , dd.YUL               as  yul
             , dd.RETURN_DAY        as  returnDay
             , dd.RECEIPT_YN        as  receiptYn
             , dd.RECEIPT_DATE      as  receiptDate
             , dd.REMARKS           as  remarks
             , dd.REG_DATE          as  regDate
             , dd.REG_ID            as  regId
             , dd.UPDATE_DATE       as  updateDate
             , dd.UPDATE_ID         as  updateId

        FROM SDEALDTB as dd
                 -- 도서코드
                 left outer join SDEALHTB as dh ON dh.DEAL_DAY  = dd.DEAL_DAY AND dh.SEQ = dd.SEQ
                 left outer join MCUSTTB as mc ON mc.CUST_CD  = dh.CUST_CD
                 left outer join MPRODTB as mp  ON mp.PROD_CD = dd.PROD_CD
                 left outer join MCOMMTB as c1 ON c1.COMM_CD  = dd.DEAL_FG

        where 1=1
          AND dd.DEAL_DAY   BETWEEN #{paramPeriodFrom } AND #{paramPeriodTo }
        <if test='paramDealFg != null and paramDealFg != ""'>
          AND dd.DEAL_FG = #{paramDealFg }
        </if>
        <if test='paramCustCd != null and paramCustCd != ""'>
          AND dh.CUST_CD = #{paramCustCd }
        </if>
        <if test='paramValue != null and paramValue != ""'>
            AND ( dh.CUST_CD LIKE CONCAT( '%', #{paramValue }, '%' )
              OR  mc.CUST_NM LIKE CONCAT( '%', #{paramValue }, '%')
              OR  dd.REMARKS LIKE CONCAT( '%', #{paramValue }, '%')
              OR  mp.PROD_NM LIKE CONCAT( '%', #{paramValue }, '%')
                )
        </if>
        ORDER BY dd.DEAL_DAY, dd.SEQ, dd.CNT
        LIMIT #{paramPageRows} OFFSET #{paramStartRowNum }
    </select>

    <!-- 출고전표 집계현황  -->
    <select id="sal2120_list" resultType="java.util.HashMap">
        SELECT    ROW_NUMBER() OVER (ORDER BY dd.DEAL_DAY, dd.SEQ ) as rowNum
                , dd.DEAL_DAY           as  dealDay
                , dd.SEQ                as  seq
                , dd.CUST_CD            as  custCd
                , mc.CUST_NM            as  custNm
                , count(dd.PROD_CD)     as  cnt
                , sum(dd.QTY)           as  sumQty
                , sum(dd.AMT)           as  sumAmt
                , ''                    as  remarks

            FROM SDEALDTB dd
                left outer join MCUSTTB mc ON mc.CUST_CD =  dd.CUST_CD
            WHERE dd.DEAL_DAY between  #{paramPeriodFrom } AND #{paramPeriodTo }
              AND dd.DIV_CD = '1'    -- 출고전표
                <if test='paramCustCd != null and paramCustCd != ""'>
                    AND dd.CUST_CD =  #{paramCustCd }
                </if>
                <if test='paramProdCd  != null and paramProdCd  != ""'>
                    AND dd.PROD_CD =  #{paramProdCd }
                </if>
            GROUP BY dd.DEAL_DAY, dd.SEQ
            ORDER BY dd.DEAL_DAY, dd.SEQ
    </select>


    <!-- 반품전표 현황 불러오기  -->
    <select id="sal2130_maxPages" resultType="java.util.HashMap">
        SELECT
              count(*)  as maxPages
            , SUM(QTY)  as  sumQty
            , SUM(AMT)  as  sumAmt
        FROM SDEALDTB  dd
            -- 헤더
            left outer join SDEALHTB as dh ON dh.DEAL_DAY = dd.DEAL_DAY	AND dh.SEQ = dd.SEQ
            -- 거래처코드
            left outer join MCUSTTB as mc ON mc.CUST_CD	= dh.CUST_CD
            -- 도서코드
            left outer join MPRODTB mp  ON mp.PROD_CD	=	dd.PROD_CD
            -- 공통코드 (출고구분)
            left outer join MCOMMTB as c1 ON c1.COMM_CD	=	dd.DEAL_FG

        WHERE dd.DIV_CD = '9'
          AND dd.DEAL_DAY   BETWEEN #{paramPeriodFrom } AND #{paramPeriodTo }
            <if test='paramDealFg != null and paramDealFg != ""'>
                AND dd.DEAL_FG = #{paramDealFg }
            </if>
            <if test='paramCustCd != null and paramCustCd != ""'>
                AND dh.CUST_CD = #{paramCustCd }
            </if>
            <if test='paramProdCd != null and paramProdCd != ""'>
                AND dd.PROD_CD = #{paramProdCd }
            </if>
            <if test='paramValue != null and paramValue != ""'>
                AND ( dh.CUST_CD LIKE CONCAT( '%', #{paramValue }, '%' )
                OR  mc.CUST_NM LIKE CONCAT( '%', #{paramValue }, '%')
                OR  dd.REMARKS LIKE CONCAT( '%', #{paramValue }, '%')
                OR  dd.PROD_CD LIKE CONCAT( '%', #{paramValue }, '%')
                OR  mp.PROD_NM LIKE CONCAT( '%', #{paramValue }, '%')
                )
            </if>
        ORDER BY dd.DEAL_DAY, dd.SEQ, dd.CNT

    </select>

    <select id="sal2130_list" resultType="java.util.HashMap">
        SELECT    ROW_NUMBER() OVER (ORDER BY dd.DEAL_DAY, dd.SEQ, dd.CNT) as rowNum
                , dd.DEAL_DAY	    as	dealDay
                , dd.SEQ			as	seq
                , dd.CNT			as	cnt
                , dh.CUST_CD		as	custCd
                , mc.CUST_NM		as	custNm
                , dd.PROD_CD		as	prodCd
                , mp.PROD_NM		as	prodNm
                , dd.DEAL_FG		as	dealFg
                , c1.COMM_NM		as	dealFgNm
                , dd.QTY			as	qty
                , dd.PRICE		    as	price
                , dd.AMT			as	amt
                , dd.YUL			as	yul
                , dd.CUST_SEQ	    as	custSeq
                , dd.CUSTS_CD	    as	custsCd
                , dd.REMARKS		as	remarks
                , dd.RETURN_DAY	    as	returnDay
        FROM SDEALDTB dd
            -- 헤더
            left outer join SDEALHTB as dh ON dh.DEAL_DAY = dd.DEAL_DAY	AND dh.SEQ = dd.SEQ
            -- 거래처코드
            left outer join MCUSTTB as mc ON mc.CUST_CD	= dh.CUST_CD
            -- 도서코드
            left outer join MPRODTB mp  ON mp.PROD_CD	=	dd.PROD_CD
            -- 공통코드 (출고구분)
            left outer join MCOMMTB as c1 ON c1.COMM_CD	=	dd.DEAL_FG


        WHERE dd.DIV_CD = '9'
          AND dd.DEAL_DAY   BETWEEN #{paramPeriodFrom } AND #{paramPeriodTo }
        <if test='paramDealFg != null and paramDealFg != ""'>
            AND dd.DEAL_FG = #{paramDealFg }
        </if>
        <if test='paramCustCd != null and paramCustCd != ""'>
            AND dh.CUST_CD = #{paramCustCd }
        </if>
        <if test='paramProdCd != null and paramProdCd != ""'>
            AND dd.PROD_CD = #{paramProdCd }
        </if>
        <if test='paramValue != null and paramValue != ""'>
            AND ( dh.CUST_CD LIKE CONCAT( '%', #{paramValue }, '%' )
            OR  mc.CUST_NM LIKE CONCAT( '%', #{paramValue }, '%')
            OR  dd.REMARKS LIKE CONCAT( '%', #{paramValue }, '%')
            OR  dd.PROD_CD LIKE CONCAT( '%', #{paramValue }, '%')
            OR  mp.PROD_NM LIKE CONCAT( '%', #{paramValue }, '%')
            )
        </if>
        ORDER BY dd.DEAL_DAY, dd.SEQ, dd.CNT
        LIMIT #{paramPageRows} OFFSET #{paramStartRowNum }
    </select>

    <!-- 반품전표 집계현황 불러오기  -->
    <select id="sal2140_list" resultType="java.util.HashMap">
        SELECT    ROW_NUMBER() OVER (ORDER BY dd.DEAL_DAY, dd.SEQ) as rowNum
                , dd.DEAL_DAY	    as	dealDay
                , dd.SEQ			as	seq
                , dh.CUST_CD		as	custCd
                , mc.CUST_NM		as	custNm
                , count(dd.PROD_CD) as 	prodCnt
                , SUM(dd.qty) 		as  sumQty
                , SUM(dd.AMT) 		as  sumAmt
                , dd.RETURN_DAY		as	returnDay
        FROM SDEALDTB dd
            -- 헤더
            left outer join SDEALHTB as dh ON dh.DEAL_DAY = dd.DEAL_DAY	AND dh.SEQ = dd.SEQ
            -- 거래처코드
            left outer join MCUSTTB as mc ON mc.CUST_CD	= dh.CUST_CD


        WHERE dd.DIV_CD = '9'
          AND dd.DEAL_DAY   BETWEEN #{paramPeriodFrom } AND #{paramPeriodTo }
        <if test='paramCustCd != null and paramCustCd != ""'>
            AND dh.CUST_CD = #{paramCustCd }
        </if>
        <if test='paramProdCd != null and paramProdCd != ""'>
            AND dd.PROD_CD = #{paramProdCd }
        </if>
        GROUP BY dd.DEAL_DAY, dd.SEQ
    </select>

    <!-- 도서별 판매현황 불러오기  -->
    <select id="sal2150_list" resultType="java.util.HashMap">
        SELECT    st.PROD_CD                   as  prodCd
                , mp.PROD_NM                   as  prodNm
                , SUM(IFNULL(st.I_QTY, 0))     as  iQty
                , SUM(IFNULL(st.O_QTY, 0))     as  oQty
                , SUM(IFNULL(st.oj_QTY, 0))    as  ojQty
                , SUM(IFNULL(st.OB_QTY, 0))    as  obQty
                , SUM(IFNULL(st.OX_QTY, 0))    as  oxQty
                , SUM(IFNULL(st.O_AMT, 0))     as  oAmt
                , SUM(IFNULL(st.OB_AMT, 0))    as  obAmt
        FROM SSTOCKTB st
            left join MPRODTB mp ON mp.PROD_CD = st.PROD_CD

        WHERE st.STOCK_DAY BETWEEN #{paramPeriodFrom } AND #{paramPeriodTo }
            AND NOT(st.I_QTY=0 AND st.O_QTY=0 AND st.OB_QTY=0 AND st.OJ_QTY=0 AND st.OX_QTY=0 AND st.O_AMT=0 AND st.OB_AMT=0)
        <if test='paramProdCd != null and paramProdCd != ""'>
            AND st.PROD_CD = #{paramProdCd }
        </if>
        GROUP BY st.PROD_CD

    </select>

    <select id="sal2150_select_list" resultType="java.util.HashMap">
        SELECT     a.cust_cd           as  custCd
                 , mc.CUST_NM          as  custNm
                 , SUM(a.i_qty)        as  iQty
                 , SUM(a.o_qty)        as  oQty
                 , SUM(a.oj_qty)       as  ojQty
                 , SUM(a.ob_qty)       as  obQty
                 , SUM(a.ox_qty)       as  oxQty
                 , SUM(a.o_amt)        as  oAmt
                 , SUM(a.ob_amt)       as  obAmt
        FROM (
                 SELECT  bd.CUST_CD             as  cust_cd
                      , ifnull(bd.QTY, 0)       as  i_qty
                      , 0                       as  o_qty
                      , 0                       as  oj_qty
                      , 0                       as  ob_qty
                      , 0                       as  ox_qty
                      , 0                       as  o_amt
                      , 0                       as  ob_amt
                 FROM SBUYDTB bd

                 WHERE bd.BUY_DAY BETWEEN #{paramPeriodFrom } AND #{paramPeriodTo }
                   AND bd.PROD_CD = #{paramProdCd }
                   AND bd.QTY != 0

                 UNION ALL

                 SELECT    dd.CUST_CD                                                                           as  cust_cd
                         , 0                                                                                    as  i_qty
                         , if(dd.DIV_CD='1', if(substring(dd.DEAL_FG,4,2) = '11', ifnull(dd.QTY, 0), 0),0)      as  o_qty	-- 출고
                         , if(dd.DIV_CD='1', if(dd.DEAL_FG = '4021205', ifnull(dd.QTY, 0), 0),0)             	as  oj_qty	-- 증정
                         , if(dd.DIV_CD='9', ifnull(dd.QTY, 0),0)                                               as  ob_qty	-- 반품
                         , if(dd.DIV_CD='1', if(RIGHT(dd.DEAL_FG,4) = '1990', ifnull(dd.QTY, 0), 0),0)          as  ox_qty  -- 폐기
                         , if(dd.DIV_CD='1', if(substring(dd.DEAL_FG,4,2) = '11', ifnull(dd.AMT, 0), 0),0)      as  o_amt	-- 출고금액
                         , if(dd.DIV_CD='9', ifnull(dd.AMT, 0),0)       	                                    as  ob_amt	-- 반품금액
                 FROM SDEALDTB dd

                 WHERE dd.DEAL_DAY BETWEEN  #{paramPeriodFrom } AND #{paramPeriodTo }
                   AND dd.PROD_CD = #{paramProdCd }
                   AND NOT(dd.QTY=0 AND dd.AMT=0)
                    <if test='paramCustCd != null and paramCustCd != ""'>
                        AND dd.CUST_CD = #{paramCustCd }
                    </if>
             ) a
                 left join MCUSTTB mc ON  mc.CUST_CD = a.cust_cd
        GROUP BY a.cust_cd
        ORDER BY a.cust_cd

    </select>

    <!-- 거래처별 판매현황 불러오기  -->
    <select id="sal2160_list" resultType="java.util.HashMap">
        SELECT     a.cust_cd            as  custCd
                 , mc.CUST_NM           as  custNm
                 , sum(a.i_qty)         as  iQty
                 , sum(a.o_qty)         as  oQty
                 , sum(a.oj_qty)        as  ojQty
                 , sum(a.ob_qty)        as  obQty
                 , sum(a.ox_qty)        as  oxQty
                 , sum(a.oz_qty)        as  ozQty
                 , sum(a.o_amt)         as  oAmt
                 , sum(a.ob_amt)        as  obAmt
        FROM (
                 SELECT  bd.cust_cd                 as  cust_cd
                      , ifnull(bd.QTY, 0)    	    as  i_qty
                      , 0                           as  o_qty
                      , 0                           as  oj_qty
                      , 0                           as  ob_qty
                      , 0                           as  ox_qty
                      , 0                           as  oz_qty
                      , 0                           as  o_amt
                      , 0                           as  ob_amt
                 FROM SBUYDTB bd

                 WHERE bd.BUY_DAY BETWEEN #{paramPeriodFrom } AND #{paramPeriodTo }
                   AND bd.QTY != 0
                    <if test='paramCustCd != null and paramCustCd != ""'>
                        AND bd.CUST_CD = #{paramCustCd }
                    </if>
             UNION ALL
                 SELECT  dd.cust_cd                                                                            	    as  cust_cd
                         , 0                                                                                   	    as  i_qty
                         , if(dd.DIV_CD='1', if(substring(dd.DEAL_FG,4,2)  = '11', ifnull(dd.QTY, 0), 0),0) 		as  o_qty
                         , if(dd.DIV_CD='1', if(dd.DEAL_FG = '4021205', ifnull(dd.QTY, 0), 0),0)             		as  oj_qty
                         , if(dd.DIV_CD='9' AND dd.DEAL_FG != '4021980', ifnull(dd.QTY, 0),0)                		as  ob_qty
                         , if(dd.DIV_CD='1', if(dd.DEAL_FG = '4021990', ifnull(dd.QTY, 0), 0),0)             		as  ox_qty
                         , if(dd.DEAL_FG='4021980', if(dd.DIV_CD='1', ifnull(dd.QTY, 0),0-ifnull(dd.QTY, 0)),0)     as  oz_qty
                         , if(dd.DIV_CD='1', if(substring(dd.DEAL_FG,4,2)  = '11', ifnull(dd.AMT, 0), 0),0)      	as  o_amt
                         , if(dd.DIV_CD='9' AND dd.DEAL_FG != '4021980', ifnull(dd.AMT, 0),0)                       as  ob_amt
                 FROM SDEALDTB dd

                 WHERE dd.DEAL_DAY BETWEEN  #{paramPeriodFrom } AND #{paramPeriodTo }
                   AND NOT(dd.QTY=0 AND dd.AMT=0)
                    <if test='paramProdCd != null and paramProdCd != ""'>
                        AND dd.CUST_CD = #{paramCustCd }
                    </if>
             ) a
                 left join MCUSTTB mc ON  mc.CUST_CD = a.cust_cd
        GROUP BY a.cust_cd
        ORDER BY a.cust_cd

    </select>

    <select id="sal2160_select_list" resultType="java.util.HashMap">
        SELECT     a.prod_cd            as  prodCd
                 , mp.PROD_NM           as  prodNm
                 , sum(a.i_qty)         as  iQty
                 , sum(a.o_qty)         as  oQty
                 , sum(a.oj_qty)        as  ojQty
                 , sum(a.ob_qty)        as  obQty
                 , sum(a.ox_qty)        as  oxQty
                 , sum(a.oz_qty)        as  ozQty
                 , sum(a.o_amt)         as  oAmt
                 , sum(a.ob_amt)        as  obAmt
        FROM (
                 SELECT    bd.PROD_CD                 	as  prod_cd
                          , ifnull(bd.QTY, 0)    		as  i_qty
                          , 0                          	as  o_qty
                          , 0                          	as  oj_qty
                          , 0                          	as  ob_qty
                          , 0                          	as  ox_qty
                          , 0                          	as  oz_qty
                          , 0                          	as  o_amt
                          , 0                          	as  ob_amt
                 FROM SBUYDTB bd

                 WHERE bd.BUY_DAY BETWEEN #{paramPeriodFrom } AND #{paramPeriodTo }
                   AND bd.CUST_CD = #{paramCustCd }
                   AND bd.QTY != 0
             UNION ALL
                 SELECT    dd.PROD_CD	                                                                          	as  prod_cd
                         , 0                                                                                     	as  i_qty
                         , if(dd.div_cd='1', if(substring(dd.DEAL_FG,4,2) = '11', ifnull(dd.QTY, 0), 0),0)      	as  o_qty
                         , if(dd.div_cd='1', if(dd.DEAL_FG = '4021205', ifnull(dd.QTY, 0), 0),0)             		as  oj_qty
                         , if(dd.div_cd='9' AND dd.DEAL_FG != '4021980', ifnull(dd.QTY, 0),0)                		as  ob_qty
                         , if(dd.div_cd='1', if(dd.DEAL_FG = '4021990', ifnull(dd.QTY, 0), 0),0)             		as  ox_qty
                         , if(dd.DEAL_FG='4021980', if(dd.div_cd='1', ifnull(dd.QTY, 0),0-ifnull(dd.QTY, 0)),0)	    as  oz_qty
                         , if(dd.div_cd='1', if(substring(dd.DEAL_FG,4,2) = '11', ifnull(dd.AMT, 0), 0),0)      	as  o_amt
                         , if(dd.div_cd='9' AND dd.DEAL_FG != '4021980', ifnull(dd.AMT, 0),0)                       as  ob_amt
                 FROM SDEALDTB dd

                 WHERE dd.DEAL_DAY BETWEEN #{paramPeriodFrom } AND #{paramPeriodTo }
                   AND dd.CUST_CD = #{paramCustCd }
                   AND NOT(dd.QTY=0 AND dd.AMT=0)
                    <if test='paramProdCd != null and paramProdCd != ""'>
                        AND dd.PROD_CD = #{paramProdCd }
                    </if>
             ) a
                 left join MPRODTB mp ON mp.PROD_CD = a.prod_cd
        GROUP BY a.prod_cd
        ORDER BY a.prod_cd

    </select>

    <!-- 업체지점 판매현황 불러오기  -->
    <select id="sal2170_list" resultType="java.util.HashMap">
        SELECT     IFNULL(a.custs_cd, '총계') 				as 	custsCd
                 , IFNULL(a.prod_cd, '지점계') 				as 	prodCd
                 , IFNULL(mp.PROD_NM, '소계') 				as 	prodNm
                 , SUM(a.o_qty) 							as 	oQty
                 , SUM(a.oj_qty) 							as 	ojQty
                 , SUM(a.ob_qty) 							as 	obQty
                 , SUM(a.ox_qty) 							as 	oxQty
                 , SUM(a.oz_qty) 							as 	ozQty
                 , SUM(a.o_amt) 							as 	oAmt
                 , SUM(a.ob_amt) 							as 	obAmt
        FROM (
                 SELECT
                        dd.custs_cd 																					as 	custs_cd
                      , dd.PROD_CD 																					    as 	prod_cd
                      , IF(dd.DIV_CD = '1', IF(substring(dd.DEAL_FG,4,2) = '11', IFNULL(dd.QTY, 0), 0), 0) 			    as 	o_qty
                      , IF(dd.DIV_CD = '1', IF(dd.DEAL_FG = '4021205', IFNULL(dd.QTY, 0), 0), 0) 						as 	oj_qty
                      , IF(dd.DIV_CD = '9' AND dd.DEAL_FG != '4021980', IFNULL(dd.QTY, 0), 0) 						    as 	ob_qty
                      , IF(dd.DIV_CD = '1', IF(dd.DEAL_FG = '4021990', IFNULL(dd.QTY, 0), 0), 0) 						as 	ox_qty
                      , IF(dd.DEAL_FG = '4021980', IF(dd.DIV_CD = '1', IFNULL(dd.QTY, 0), 0 - IFNULL(dd.QTY, 0)), 0)    as 	oz_qty
                      , IF(dd.DIV_CD = '1', IF(substring(dd.DEAL_FG,4,2) = '11', IFNULL(dd.AMT, 0), 0), 0) 			    as 	o_amt
                      , IF(dd.DIV_CD = '9' AND dd.DEAL_FG != '4021980', IFNULL(dd.AMT, 0), 0) 						    as 	ob_amt
                 FROM SDEALDTB dd

                 WHERE dd.DEAL_DAY BETWEEN  #{paramPeriodFrom } AND #{paramPeriodTo }
                   AND dd.CUST_CD = #{paramCustCd }
                   AND NOT(dd.QTY=0 AND dd.AMT=0)
             ) a

                 LEFT JOIN MPRODTB mp ON mp.PROD_CD = a.prod_cd

        GROUP BY a.custs_cd, a.prod_cd WITH ROLLUP

    </select>

    <!-- 매출액명세서(월) 불러오기  -->
    <select id="sal2180_list" resultType="java.util.HashMap">
        SELECT
               a.cust_cd                        as  custCd   -- 거래처코드
             , mc.CUST_NM                       as  custNm   -- 거래처명
             , SUM(o_qty)                       as  oQty     -- 출고수량
             , SUM(a.o_amt)                     as  oAmt    -- 출고금액
             , SUM(a.j_qty)                     as  jQty     -- 증정수량
             , SUM(a.b_qty)                     as  bQty     -- 반품수량
             , SUM(a.b_amt)                     as  bAmt     -- 반품금액
             , SUM(a.o_amt) - SUM(a.b_amt)      as  sAmt     -- 매출금액
        FROM (
                 SELECT CUST_CD                                              -- 거래처코드
                      ,IF(IFNULL(DIV_CD, '0') = '1', IF(DEAL_FG != '4021205', QTY, 0), 0) 	as 	o_qty        -- 출고수량
                      ,IF(IFNULL(DIV_CD, '0') = '1', IF(DEAL_FG != '4021205', AMT, 0), 0) 	as 	o_amt        -- 출고금액
                      ,IF(IFNULL(DIV_CD, '0') = '9' AND DEAL_FG != '4021980', QTY, 0) 		as 	b_qty        -- 반품수량
                      ,IF(IFNULL(DIV_CD, '0') = '9' AND DEAL_FG != '4021980', AMT, 0) 		as 	b_amt        -- 반품금액
                      ,IF(IFNULL(DIV_CD, '0') = '1', IF(DEAL_FG = '4021205',  QTY, 0), 0) 	as 	j_qty        -- 증정

                 FROM SDEALDTB
                 WHERE LEFT(DEAL_DAY, 6) = CONCAT(#{paramYear}, #{paramMonth})         -- 해당월
                   AND DEAL_FG != '4021980'
             ) a
                 -- 거래처코드
                 left outer join MCUSTTB as mc ON mc.CUST_CD  = a.cust_cd

        GROUP BY a.cust_cd
        ORDER BY a.cust_cd

    </select>

    <!-- 전자계산서자료 양식  -->
    <select id="sal2190_list" resultType="java.util.HashMap">
        SELECT
               a.cust_cd                       as  custCd       -- 거래처코드
             , mc.CUST_BUSIN_NM                as  custBusinNm  -- 거래처명
             , mc.CUST_BUSIN_NO                as  custBusinNo  -- 거래처 사업자등록번호
             , mc.CUST_OWNER                   as  custOwner    -- 거래처 대표자
             , mc.BILL_EMAIL                   as  custEmail1   -- 거래처 이메일1
             , ''                              as  custEmail2   -- 거래처 이메일2
             , mc.CUST_ADDR1                   as  custAddr     -- 거래처 소재지
             , mc.CUST_COND                    as  custCond     -- 거래처 업태
             , mc.CUST_KIND                    as  custKind     -- 거래처 종목
             , ''                              as  custJongNo   -- 거래처 종사업장번호
             , ''                              as  custReamrks  -- 거래처 비고

             , SUM(a.o_amt) - SUM(a.b_amt)     as  sAmt         -- 매출금액

             , #{paramCompZone.businNm }            as  compBusinNm     -- 공급자 상호
             , #{paramCompZone.businNo }            as  compBusinNo     -- 공급자 사업자등록번호
             , #{paramCompZone.businOwner }         as  compBusinOwner  -- 공급자 대표
             , #{paramCompZone.businEmail }         as  compBusinEmail  -- 공급자 이메일
             , #{paramCompZone.businAddr }          as  compBusinAddr   -- 공급자 소재지
             , #{paramCompZone.businCond }          as  compBusinCond   -- 공급자 업태
             , #{paramCompZone.businKind }          as  compBusinKind   -- 공급자 종목
             , #{paramCompZone.billJongNo }         as  compJongNo  -- 공급자 종사업장 번호
             , ''                                   as  compRemarks     -- 공급자 비고

             , #{paramCompZone.billDiv }            as  billDiv         -- 계산서종류
             , #{paramCompZone.billDay }            as  billDay         -- 발행일
             , #{paramCompZone.billFg }             as  billFg          -- 영수,청구

             , RIGHT(#{paramCompZone.billDay}, 2)   as  DD1             -- 발행일자1
             , #{paramCompZone.billProdNm }         as  prodNm1         -- 품목1
             , ''                                   as  prodSz1         -- 규격1
             , ''                                   as  qty1            -- 수량1
             , ''                                   as  price1          -- 단가1
             , SUM(a.o_amt) - SUM(a.b_amt)          as  amt1            -- 공급가액1

             , ''                                   as  remarks1        -- 품목비고1

             , ''                                   as  DD2             -- 발행일자2
             , ''                                   as  prodNm2         -- 품목2
             , ''                                   as  prodSz2         -- 규격2
             , ''                                   as  qty2            -- 수량2
             , ''                                   as  price2          -- 단가2
             , ''                                   as  amt2            -- 공급가액2
             , ''                                   as  remarks2        -- 품목비고2

             , ''                                   as  DD3             -- 발행일자3
             , ''                                   as  prodNm3         -- 품목3
             , ''                                   as  prodSz3         -- 규격3
             , ''                                   as  qty3            -- 수량3
             , ''                                   as  price3          -- 단가3
             , ''                                   as  amt3            -- 공급가액3
             , ''                                   as  remarks3        -- 품목비고3

             , ''                                   as  DD4             -- 발행일자4
             , ''                                   as  prodNm4         -- 품목4
             , ''                                   as  prodSz4         -- 규격4
             , ''                                   as  qty4            -- 수량4
             , ''                                   as  price4          -- 단가4
             , ''                                   as  amt4            -- 공급가액4
             , ''                                   as  remarks4        -- 품목비고4

             , ''                                   as  xAmt1            -- 현금
             , ''                                   as  xAmt2            -- 수표
             , ''                                   as  xAmt3            -- 어음
             , ''                                   as  xAmt4            -- 외상미수금

        FROM (
                 SELECT 	CUST_CD                                              -- 거래처코드
                      , IF(IFNULL(DIV_CD, '0') = '1', IF(IFNULL(DEAL_FG,'0000000') != '4021205', QTY, 0), 0) 	as 	o_qty	-- 출고수량
                      , IF(IFNULL(DIV_CD, '0') = '1', IF(IFNULL(DEAL_FG,'0000000') != '4021205', AMT, 0), 0) 	as 	o_amt   -- 출고금액
                      , IF(IFNULL(DIV_CD, '0') = '9',                                        	 QTY, 0) 	    as 	b_qty   -- 반품수량
                      , IF(IFNULL(DIV_CD, '0') = '9',                                          	 AMT, 0) 	    as 	b_amt   -- 반품금액
                      , IF(IFNULL(DIV_CD, '0') = '1', IF(IFNULL(DEAL_FG,'0000000') = '4021205',  QTY, 0), 0) 	as 	j_qty   -- 증정

                 FROM SDEALDTB
                 where left(DEAL_DAY, 6) = CONCAT(#{paramYear}, #{paramMonth})  -- 해당년월
                   AND CUST_CD != '00001' AND CUST_CD != '00008'	-- 본사,현매 제외
             ) a

                 -- 거래처코드
                 left outer join MCUSTTB as mc ON mc.CUST_CD  = a.cust_cd

        where 1=1

            <if test='paramBillYn != null and paramBillYn != ""'>
                AND mc.BILL_YN = 'Y'
            </if>

        group by a.cust_cd
        order by a.cust_cd

    </select>

    <!-- 입금전표 관리  -->
    <select id="sal3010_list" resultType="java.util.HashMap">
        SELECT
               ac.ACC_DAY		as	accDay
             , ac.ACC_DAY   	as  oldAccDay
             , ac.SEQ			as	seq
             , ac.SEQ			as	oldSeq
             , ac.CUST_CD		as	custCd
             , ac.ACC_FG		as	accFg
            -- , CASE WHEN ac.ACC_FG = '1'  THEN '현금'
            --        WHEN ac.ACC_FG = '2'  THEN '어음'
            --        WHEN ac.ACC_FG = '3'  THEN '은행'
            --        WHEN ac.ACC_FG = '4'  THEN '카드'
            --        WHEN ac.ACC_FG = '5'  THEN '공제'
            --        WHEN ac.ACC_FG = '9'  THEN '기타'
            --        ELSE ''
            -- END 				as 	accFgNm
             , mc.CUST_NM		as	custNm
             , ac.AMT		    as	amt
             , ac.REMARKS		as	remarks
             ,'R'       		as  iuD
        FROM SACCTB as ac
                 -- 거래처코드
                 left outer join MCUSTTB as mc ON mc.CUST_CD  = ac.CUST_CD

        WHERE left(ac.ACC_DAY, 6) =  CONCAT(#{paramYear}, #{paramMonth})
        <if test='paramValue != null and paramValue != ""'>
            AND ( ac.CUST_CD LIKE CONCAT( '%', #{paramValue }, '%' )
            OR  ac.ACC_DAY LIKE CONCAT( '%', #{paramValue }, '%')
            OR  mc.CUST_NM LIKE CONCAT( '%', #{paramValue }, '%')
            OR  ac.AMT LIKE CONCAT( '%', #{paramValue }, '%')
            OR  ac.REMARKS LIKE CONCAT( '%', #{paramValue }, '%')
            )
        </if>


        ORDER BY SEQ DESC, ACC_DAY DESC

    </select>


    <insert id="sal3010_insert" parameterType="java.util.Map">
        <foreach collection="list1" item="item" separator=";">
            INSERT INTO SACCTB
                (
                      ACC_DAY
                    , SEQ
                    , CUST_CD
                    , ACC_FG
                    , AMT
                    , REMARKS
                    , REG_DATE
                    , REG_ID
                    , UPDATE_DATE
                    , UPDATE_ID
                ) VALUES (
                      #{item.accDay}
                    , #{item.seq}
                    , #{item.custCd}
                    , #{item.accFg}
                    , #{item.amt}
                    , #{item.remarks}
                    , NOW()
                    , #{userId}
                    , NOW()
                    , #{userId}
                )
        </foreach>
    </insert>

    <update id="sal3010_update" parameterType="java.util.Map">
        <foreach collection="list1" item="item" separator=";">
            UPDATE SACCTB
                SET
                      ACC_DAY       =   #{item.accDay}
                    , CUST_CD       =   #{item.custCd}
                    , ACC_FG        =   #{item.accFg}
                    , AMT           =   #{item.amt}
                    , REMARKS       =   #{item.remarks}
                    , UPDATE_DATE   =   NOW()
                    , UPDATE_ID     =   #{userId}
                WHERE ACC_DAY       =   #{item.oldAccDay}
                  AND SEQ           =   #{item.oldSeq}
        </foreach>
    </update>

    <delete id="sal3010_delete" parameterType="java.util.Map">
        <foreach collection="list1" item="item" separator=";">
            DELETE FROM SACCTB
              WHERE ACC_DAY         =   #{item.accDay}
                AND SEQ             =   #{item.seq}
        </foreach>
    </delete>

    <select id="sal3010_select_bill" resultType="java.util.HashMap">
        SELECT
               bi.BILL_SEQ      as  billSeq
             , bi.BILL_NO       as  billNo
             , bi.DIV_CD        as  divCd
             , bi.PUB_COMP      as  pubComp
             , bi.PUB_NM        as  pubNm
             , bi.PUB_DAY       as  pubDay
             , bi.REC_DAY       as  recDay
             , bi.PAY_DAY       as  payDay
             , bi.PAY_BANK      as  payBank
             , bi.PAY_POINT     as  payPoint
             , bi.PAY_COMP      as  payComp
             , bi.END_DAY       as  endDay
             , bi.BILL_AMT      as  billAmt
             , bi.YUL           as  yul
             , bi.YUL_AMT       as  yulAmt
             , bi.REMARKS       as  remarks
             , bi.ACC_DAY       as  accDay
             , bi.SEQ           as  seq
             , bi.REG_DATE      as  regDate
             , bi.REG_ID        as  regId
             , bi.UPDATE_DATE   as  updateDate
             , bi.UPDATE_ID     as  updateId

             , 'R'              as  iuD
        FROM SBILLTB as bi

        where 1=1

          AND bi.ACC_DAY    =   #{paramAccDay }
          AND bi.SEQ        =   #{paramSeq }
    </select>

    <insert id="sal3010_insert_bill" parameterType="java.util.Map">
        <foreach collection="list1" item="item" separator=";">
            INSERT INTO SBILLTB    (
                  BILL_SEQ
                , BILL_NO
                , DIV_CD
                , PUB_COMP
                , PUB_NM
                , PUB_DAY
                , REC_DAY
                , PAY_DAY
                , PAY_BANK
                , PAY_POINT
                , PAY_COMP
                , END_DAY
                , BILL_AMT
                , YUL
                , YUL_AMT
                , REMARKS
                , ACC_DAY
                , SEQ
                , REG_DATE
                , REG_ID
                , UPDATE_DATE
                , UPDATE_ID
            ) VALUES (
                  (SELECT IFNULL(MAX(b.BILL_SEQ) + 1, 1) FROM SBILLTB b)
                , #{item.billNo }
                , #{item.divCd }
                , #{item.pubComp }
                , #{item.pubNm }
                , #{item.pubDay }
                , #{item.recDay }
                , #{item.payDay }
                , #{item.payBank }
                , #{item.payPoint }
                , #{item.payComp }
                , #{item.endDay }
                , #{item.billAmt }
                , #{item.yul }
                , #{item.yulAmt }
                , #{item.remarks }
                , #{item.accDay }
                , #{item.seq }
                , now()
                , #{userId}
                , now()
                , #{userId}
            )
        </foreach>
    </insert>

    <update id="sal3010_update_bill" parameterType="java.util.Map">
        <foreach collection="list1" item="item" separator=";">
            UPDATE SBILLTB
                SET
                      BILL_NO        =   #{item.billNo }
                    , DIV_CD         =   #{item.divCd }
                    , PUB_COMP       =   #{item.pubComp }
                    , PUB_NM         =   #{item.pubNm }
                    , PUB_DAY        =   #{item.pubDay }
                    , REC_DAY        =   #{item.recDay }
                    , PAY_DAY        =   #{item.payDay }
                    , PAY_BANK       =   #{item.payBank }
                    , PAY_POINT      =   #{item.payPoint }
                    , PAY_COMP       =   #{item.payComp }
                    , END_DAY        =   #{item.endDay }
                    , BILL_AMT       =   #{item.billAmt }
                    , YUL            =   #{item.yul }
                    , YUL_AMT        =   #{item.yulAmt }
                    , REMARKS        =   #{item.remarks }
                    , ACC_DAY        =   #{item.accDay }
                    , SEQ            =   #{item.seq }
                    , UPDATE_DATE    =   now()
                    , UPDATE_ID      =   #{userid}

            WHERE BILL_SEQ      =   #{item.billSeq }
        </foreach>
    </update>

    <delete id="sal3010_delete_bill" parameterType="java.util.Map">
        <foreach collection="list1" item="item" separator=";">
            DELETE FROM SBILLTB
              WHERE BILL_SEQ        =   #{item.billSeq}
        </foreach>
    </delete>

    <!-- 어음전표 관리  -->
    <select id="sal3020_list" resultType="java.util.HashMap">
        SELECT
              bi.BILL_SEQ      as  billSeq
            , bi.BILL_NO       as  billNo
            , bi.DIV_CD        as  divCd
            , bi.PUB_COMP      as  pubComp
            , bi.PUB_NM        as  pubNm
            , bi.PUB_DAY       as  pubDay
            , bi.REC_DAY       as  recDay
            , bi.PAY_DAY       as  payDay
            , bi.PAY_BANK      as  payBank
            , bi.PAY_POINT     as  payPoint
            , bi.PAY_COMP      as  payComp
            , bi.END_DAY       as  endDay
            , bi.BILL_AMT      as  billAmt
            , bi.YUL           as  yul
            , bi.YUL_AMT       as  yulAmt
            , bi.REMARKS       as  remarks
            , bi.ACC_DAY       as  accDay
            , bi.SEQ           as  seq
            , bi.REG_DATE      as  regDate
            , bi.REG_ID        as  regId
            , bi.UPDATE_DATE   as  updateDate
            , bi.UPDATE_ID     as  updateId

            , 'R'              as  iuD
        FROM SBILLTB as bi

        WHERE left(bi.ACC_DAY, 4) =  #{paramYear}
        <if test='paramValue != null and paramValue != ""'>
            AND ( bi.PUB_COMP LIKE CONCAT( '%', #{paramValue }, '%' )
            OR  bi.PUB_DAY LIKE CONCAT( '%', #{paramValue }, '%')
            OR  bi.END_DAY LIKE CONCAT( '%', #{paramValue }, '%')
            OR  bi.BILL_AMT LIKE CONCAT( '%', #{paramValue }, '%')
            OR  bi.REMARKS LIKE CONCAT( '%', #{paramValue }, '%')
            )
        </if>


        ORDER BY ACC_DAY DESC

    </select>

    <!-- 매출수금집계조회(월) 관리  -->
    <select id="sal3110_list" resultType="java.util.HashMap">
        SET @w_amt := 0;

        SELECT
              a.SALE_DAY	            AS  saleDay
            , IFNULL(a.o_qty, 0)        AS  oQty
            , IFNULL(a.o_amt, 0)        AS  oAmt
            , IFNULL(a.oj_qty, 0)       AS  ojQty
            , IFNULL(a.oj_amt, 0)       AS  ojAmt
            , IFNULL(a.ob_qty, 0)       AS  obQty
            , IFNULL(a.ob_amt, 0)       AS  obAmt
            , IFNULL(a.in_amt, 0)       AS  inAmt
            , @w_amt := @w_amt
                    + IFNULL(a.o_amt, 0)
                    - IFNULL(a.ob_amt, 0)
                    - IFNULL(a.in_amt, 0)       AS  jAmt
            , ''                        AS  remarks
        FROM (
                -- 과거 데이터 집계
                SELECT
                      CONCAT(#{paramYear}, #{paramMonth}, '00') 	AS 	sale_day
                    , 0                      	AS 	o_qty
                    , 0                      	AS 	o_amt
                    , 0                      	AS 	oj_qty
                    , 0                      	AS 	oj_amt
                    , 0                      	AS	ob_qty
                    , 0                      	AS 	ob_amt
                    , 0                      	AS 	in_amt
                    , @w_amt := IFNULL(SUM(O_AMT), 0) - IFNULL(SUM(OB_AMT), 0) - IFNULL(SUM(IN_AMT), 0) 	AS 	initial_j_amt
                FROM STSALETB
                WHERE CUST_CD = #{paramCustCd }
                AND LEFT(SALE_DAY, 6)   <![CDATA[<]]>    CONCAT(#{paramYear}, #{paramMonth})

            UNION ALL

                -- 현재 월 데이터
                SELECT
                      SALE_DAY
                    , IFNULL(SUM(O_QTY), 0) 	AS 	o_qty
                    , IFNULL(SUM(O_AMT), 0) 	AS 	o_amt
                    , IFNULL(SUM(OJ_QTY), 0) 	AS 	oj_qty
                    , IFNULL(SUM(OJ_AMT), 0) 	AS 	oj_amt
                    , IFNULL(SUM(OB_QTY), 0) 	AS 	ob_qty
                    , IFNULL(SUM(OB_AMT), 0) 	AS 	ob_amt
                    , IFNULL(SUM(IN_AMT), 0) 	AS 	in_amt
                    , NULL 	AS 	initial_j_amt   -- 초기값은 필요 없음
                    FROM STSALETB
                WHERE CUST_CD = #{paramCustCd }
                AND LEFT(SALE_DAY, 6) = CONCAT(#{paramYear}, #{paramMonth})
                GROUP BY SALE_DAY
        ) a
        ORDER BY a.SALE_DAY

    </select>

    <!-- 매출수금집계조회(년) 관리  -->
    <select id="sal3120_list" resultType="java.util.HashMap">
        SET @w_amt := 0;

        SELECT
              a.sale_day	            AS  saleDay
            , IFNULL(a.o_qty, 0)        AS  oQty
            , IFNULL(a.o_amt, 0)        AS  oAmt
            , IFNULL(a.oj_qty, 0)       AS  ojQty
            , IFNULL(a.oj_amt, 0)       AS  ojAmt
            , IFNULL(a.ob_qty, 0)       AS  obQty
            , IFNULL(a.ob_amt, 0)       AS  obAmt
            , IFNULL(a.in_amt, 0)       AS  inAmt
            , @w_amt := @w_amt
                    + IFNULL(a.o_amt, 0)
                    - IFNULL(a.ob_amt, 0)
                    - IFNULL(a.in_amt, 0)       AS  jAmt
            , ''                        AS  remarks
        FROM (
                -- 과거 데이터 집계
                SELECT
                      CONCAT(#{paramYear}, '00') AS  sale_day
                    , 0                      	AS 	o_qty
                    , 0                      	AS 	o_amt
                    , 0                      	AS 	oj_qty
                    , 0                      	AS 	oj_amt
                    , 0                      	AS	ob_qty
                    , 0                      	AS 	ob_amt
                    , 0                      	AS 	in_amt
                    , @w_amt := IFNULL(SUM(O_AMT), 0) - IFNULL(SUM(OB_AMT), 0) - IFNULL(SUM(IN_AMT), 0) 	AS 	initial_j_amt
                FROM STSALETB
                WHERE CUST_CD = #{paramCustCd }
                AND LEFT(SALE_DAY, 4)   <![CDATA[<]]>    #{paramYear}

            UNION ALL

                -- 현재 월 데이터
                SELECT
                      LEFT(SALE_DAY, 6)         AS  sale_day
                    , IFNULL(SUM(O_QTY), 0) 	AS 	o_qty
                    , IFNULL(SUM(O_AMT), 0) 	AS 	o_amt
                    , IFNULL(SUM(OJ_QTY), 0) 	AS 	oj_qty
                    , IFNULL(SUM(OJ_AMT), 0) 	AS 	oj_amt
                    , IFNULL(SUM(OB_QTY), 0) 	AS 	ob_qty
                    , IFNULL(SUM(OB_AMT), 0) 	AS 	ob_amt
                    , IFNULL(SUM(IN_AMT), 0) 	AS 	in_amt
                    , NULL 	AS 	initial_j_amt   -- 초기값은 필요 없음
                    FROM STSALETB
                WHERE CUST_CD = #{paramCustCd }
                AND LEFT(SALE_DAY, 4) = #{paramYear}
                GROUP BY LEFT(SALE_DAY, 6)
        ) a
        ORDER BY a.sale_day

    </select>

    <!-- 입금전표현황  -->
    <select id="sal3210_list" resultType="java.util.HashMap">
        SELECT    ROW_NUMBER() OVER (ORDER BY ac.ACC_DAY) as rowNum
                , ac.ACC_DAY	                	as  accDay
                , ac.CUST_CD                        as  custCd
                , mc.CUST_NM                        as  custNm
                , (SELECT ((sum(ts.O_AMT) - sum(ts.OB_AMT)) - sum(ts.IN_AMT))
                    FROM STSALETB ts WHERE ts.SALE_DAY <![CDATA[<=]]> ac.ACC_DAY AND ts.CUST_CD = ac.CUST_CD
                    GROUP by ts.CUST_CD
                  )                                 as 	wAmt
                , ac.AMT			         		as  amt
                , CASE  when  ac.ACC_FG = '1'  then  '현금'
                        when  ac.ACC_FG = '2'  then  '어음'
                        when  ac.ACC_FG = '3'  then  '은행'
                        when  ac.ACC_FG = '4'  then  '카드'
                        when  ac.ACC_FG = '5'  then  '공제'
                        when  ac.ACC_FG = '9'  then  '기타'
                        else                        '오류'
                        END                   		as  accFgNm
                , ac.REMARKS			      		as  remarks
                , bl.END_DAY                        as  endDay
                , bl.DIV_CD		             	    as  divCd
                , c1.COMM_NM			            as  divCdNm
                , bl.PUB_COMP		                as  pubComp
                , bl.BILL_AMT		                as  billAmt

        FROM SACCTB ac

            -- 거래처코드
            left outer join MCUSTTB as mc ON mc.CUST_CD  = ac.CUST_CD
            -- 어음정보
            left outer join SBILLTB as bl ON bl.ACC_DAY  = ac.ACC_DAY AND bl.SEQ = ac.SEQ
            -- 공통코드(어음유형 1303)
            left outer join MCOMMTB as c1 ON c1.COMM_CD = bl.DIV_CD

        WHERE ac.ACC_DAY BETWEEN  #{paramPeriodFrom } AND #{paramPeriodTo }
            <if test='paramAccFg != null and paramAccFg != ""'>
                AND ac.ACC_FG = #{paramAccFg }
            </if>
            <if test='paramCustCd != null and paramCustCd != ""'>
                AND ac.CUST_CD = #{paramCustCd }
            </if>
            <if test='paramValue != null and paramValue != ""'>
                AND ( ac.CUST_CD LIKE CONCAT( '%', #{paramValue }, '%' )
                OR  mc.CUST_NM LIKE CONCAT( '%', #{paramValue }, '%')
                OR  ac.REMARKS LIKE CONCAT( '%', #{paramValue }, '%')
                )
            </if>
        ORDER BY ac.ACC_DAY

    </select>

    <!-- 어음전표현황  -->
    <select id="sal3220_list" resultType="java.util.HashMap">
        SELECT
              bi.BILL_NO            as  billNo
            , bi.DIV_CD             as  divCd
            , c1.COMM_NM  		    as 	divCdNm
            , bi.PUB_COMP			as	pubComp
            , bi.PUB_NM			    as	pubNm
            , bi.PUB_Day			as	pubDay
            , bi.REC_DAY			as	recDay
            , bi.PAY_DAY			as	payDay
            , bi.PAY_POINT		    as	payPoint
            , bi.PAY_COMP			as	payComp
            , bi.END_DAY			as	endDay
            , bi.BILL_AMT			as	billAmt
            , bi.YUL				as	yul
            , bi.YUL_AMT			as	yulAmt
            , bi.REMARKS			as	remarks
            , bi.ACC_DAY			as	accDay
            , bi.SEQ				as	seq
        FROM SBILLTB bi
            -- 어음유형 (공통코드 1303)
            left outer join MCOMMTB as c1 ON c1.COMM_CD = bi.DIV_CD

        WHERE 1=1
          AND bi.BILL_AMT	!=	0
            <if test='paramDivCd != null and paramDivCd != ""'>
                AND  bi.DIV_CD = #{paramDivCd }
            </if>
            <if test='paramFg == "1"'>
                AND bi.ACC_DAY BETWEEN #{paramPeriodFrom } AND #{paramPeriodTo }
            </if>
            <if test='paramFg == "2"'>
                AND bi.END_DAY BETWEEN #{paramPeriodFrom } AND #{paramPeriodTo }
            </if>
            <if test='paramValue != null and paramValue != ""'>
                AND ( bi.PUB_COMP LIKE CONCAT( '%', #{paramValue }, '%' )
                OR  bi.PUB_NM LIKE CONCAT( '%', #{paramValue }, '%')
                OR  bi.REMARKS LIKE CONCAT( '%', #{paramValue }, '%')
                )
            </if>
        ORDER BY bi.ACC_DAY DESC
    </select>

    <!-- 도서별 재고현황  -->
    <select id="sal4110_list" resultType="java.util.HashMap">
        SELECT
              b.prod_cd         as  prodCd
            , b.prod_nm         as  prodNm
            , b.wj_qty          as  wjQty
            , b.i_qty           as  iQty
            , b.o_qty           as  oQty
            , b.oj_qty          as  ojQty
            , b.ox_qty          as  oxQty
            , b.ot_qty          as  otQty
            , b.oz_qty          as  ozQty
            , b.ob_qty          as  obQty
            , b.j_qty           as  jQty
        FROM (
                SELECT
                        a.prod_cd
                        , mp.PROD_NM		as  prod_nm
                        , sum(a.wj_qty)   as  wj_qty
                        , sum(a.i_qty)    as  i_qty
                        , sum(a.o_qty)    as  o_qty
                        , sum(a.oj_qty)   as  oj_qty
                        , sum(a.ox_qty)   as  ox_qty
                        , sum(a.o_qty) + sum(a.oj_qty) + sum(a.ox_qty)  as  ot_qty
                        , sum(a.oz_qty)	as	oz_qty
                        , sum(ob_qty)     as  ob_qty
                        , (sum(a.wj_qty) + sum(a.i_qty)) - (sum(a.o_qty) + sum(a.oj_qty) + sum(a.ox_qty) + sum(a.oz_qty)) + sum(a.ob_qty) as  j_qty
                    FROM  ( SELECT PROD_CD	as	prod_cd
                                    , ifnull(sum(I_QTY),0) - (ifnull(sum(O_QTY),0)+ifnull(sum(OJ_QTY),0)+ifnull(sum(OX_QTY),0)+ifnull(sum(OZ_QTY),0)) + ifnull(sum(OB_QTY),0) as wj_qty
                                    , 0  	as  i_qty
                                    , 0  	as  o_qty
                                    , 0  	as  oj_qty
                                    , 0  	as  ox_qty
                                    , 0 	as	oz_qty
                                    , 0  	as  ob_qty
                                    FROM SSTOCKTB
                                WHERE STOCK_DAY  <![CDATA[<]]>  #{paramPeriodFrom } AND NOT(I_QTY=0 AND IB_QTY=0 AND O_QTY=0 AND OJ_QTY=0 AND OX_QTY=0 AND OZ_QTY=0 AND OB_QTY=0)
                                GROUP BY PROD_CD

                            UNION ALL

                                SELECT
                                        PROD_CD					        as	prod_cd
                                        , 0   						    as  wj_qty
                                        , ifnull(sum(I_QTY),0)  		as  i_qty
                                        , ifnull(sum(O_QTY),0)  		as  o_qty
                                        , ifnull(sum(OJ_QTY),0) 		as  oj_qty
                                        , ifnull(sum(OX_QTY),0) 		as  ox_qty
                                        , ifnull(sum(OZ_QTY),0) 		as  oz_qty
                                        , ifnull(sum(OB_QTY),0) 		as  ob_qty
                                FROM  SSTOCKTB
                                WHERE STOCK_DAY BETWEEN   #{paramPeriodFrom } AND #{paramPeriodTo }
                                AND NOT(I_QTY=0 AND IB_QTY=0 AND O_QTY=0 AND OJ_QTY=0 AND OX_QTY=0 AND OZ_QTY=0 AND OB_QTY=0)
                                GROUP BY  PROD_CD
                        ) a

                left outer join MPRODTB as mp ON mp.PROD_CD = a.PROD_CD

            WHERE 1=1
                <if test='paramProdDiv != null and paramProdDiv != ""'>
                    AND mp.PROD_DIV = #{paramProdDiv }
                </if>
                <if test='paramValue != null and paramValue != ""'>
                    AND ( mp.PROD_NM LIKE CONCAT( '%', #{paramValue }, '%' )
                          OR  a.PROD_CD LIKE CONCAT( '%', #{paramValue }, '%')
                        )
                </if>

        GROUP BY PROD_CD
        ) b

        WHERE  NOT(b.wj_qty=0 AND b.i_qty=0 AND b.o_qty=0 AND b.oj_qty=0 AND b.ox_qty=0 AND b.oz_qty=0 AND b.ot_qty=0 AND b.ob_qty=0)
        ORDER BY b.prod_cd
    </select>

    <!-- 도서별 적정재고현황  -->
    <select id="sal4120_list" resultType="java.util.HashMap">
        SELECT    a.PROD_CD                 as  prodCd         -- 코드
                , mp.PROD_NM                as  prodNm         -- 도서명
                , mp.S_PRICE                as  sPrice         -- 정가
                , SUM(j_qty)                as  jQty           -- 총 재고수량
                , SUM(b_qty)                as  bQty           -- 총 반품수량
                , SUM(om1_qty)              as  m1Qty          -- 1개월 출고수량
                , SUM(om3_qty)              as  m3Qty          -- 3개월 출고수량
                , SUM(j_qty) - SUM(om1_qty) as  ov1Qty         -- 1개월 적전재고량
                , SUM(j_qty) - SUM(om3_qty) as  ov3Qty         -- 3개월 적정재고량
                , ''                        as  remarks
        FROM (
                SELECT PROD_CD, ifnull(sum(I_QTY),0) - ( ifnull(sum(O_QTY),0) + ifnull(sum(OJ_QTY),0) + ifnull(sum(OX_QTY),0) + ifnull(sum(OZ_QTY),0) ) + ifnull(sum(OB_QTY),0)  as j_qty, 0 as b_qty, 0 as om1_qty, 0 as om3_qty FROM SSTOCKTB WHERE STOCK_DAY   <![CDATA[ <= ]]> #{paramStdDay }  group by PROD_CD
            UNION ALL
                SELECT PROD_CD, 0 as j_qty, ifnull(sum(OB_QTY),0)  as b_qty, 0 as om1_qty, 0 as om3_qty FROM SSTOCKTB WHERE STOCK_DAY   <![CDATA[ <= ]]> #{paramStdDay }  group by PROD_CD
            UNION ALL
                SELECT PROD_CD, 0 as j_qty, 0 as b_qty, ifnull(sum(O_QTY),0)  as om1_qty, 0 as om3_qty FROM SSTOCKTB WHERE STOCK_DAY  between  #{paramStdDayM1 } AND  #{paramStdDay } group by PROD_CD
            UNION ALL
                SELECT PROD_CD, 0 as j_qty, 0 as b_qty, 0 as om1_qty, ifnull(sum(O_QTY),0)  as om3_qty FROM SSTOCKTB WHERE STOCK_DAY  between #{paramStdDayM3 } AND  #{paramStdDay } group by PROD_CD
            ) a

                -- 도서코드
                left outer join MPRODTB as mp ON mp.PROD_CD  = a.PROD_CD

            WHERE a.PROD_CD != '0000'
                <if test='paramProdDiv  != null and paramProdDiv  != ""'>
                    AND mp.PROD_DIV = #{paramProdDiv }
                </if>
                AND mp.USE_YN != 'Y'
            GROUP BY a.PROD_CD
            ORDER BY a.PROD_CD asc
    </select>

    <!-- 입출재고조회(월)  -->
    <select id="sal4210_list" resultType="java.util.HashMap">
        SET @w_qty:=0, @wb_qty:=0;

        SELECT    a.stock_day       as  stockDay
                , a.i_qty           as  iQty
                , a.i_amt           as  iAmt
                , a.ib_qty          as  ibQty
                , a.ib_amt          as  ibAmt
                , a.o_qty           as  oQty
                , a.o_amt           as  oAmt
                , a.oj_qty          as  ojQty
                , a.oj_amt          as  ojAmt
                , a.ob_qty          as  obQty
                , a.ob_amt          as  obAmt
                , a.ox_qty          as  oxQty
                , a.ox_amt          as  oxAmt
                , a.oz_qty          as  ozQty
                , a.oz_amt          as  ozAmt
                , a.o_qty + a.oj_qty + a.ox_qty  as otQty
                , a.j_qty           as  jQty
                FROM (
                        SELECT    concat(CONCAT(#{paramYear }, #{paramMonth }), '00') as stock_day
                                , 0    as i_qty
                                , 0    as i_amt
                                , 0    as ib_qty
                                , 0    as ib_amt
                                , 0    as o_qty
                                , 0    as o_amt
                                , 0    as oj_qty
                                , 0    as oj_amt
                                , 0    as ob_qty
                                , 0    as ob_amt
                                , 0    as ox_qty
                                , 0    as ox_amt
                                , 0    as oz_qty
                                , 0    as oz_amt
                                , @w_qty := @w_qty + ifnull(sum(i_qty),0) - (ifnull(sum(o_qty),0)+ifnull(sum(oj_qty),0)+ifnull(sum(ox_qty),0)+ifnull(sum(oz_qty),0)) + ifnull(sum(ob_qty),0) as j_qty
                        FROM SSTOCKTB
                        WHERE PROD_CD = #{paramProdCd }
                          AND left(STOCK_DAY, 6) <![CDATA[ < ]]>  CONCAT(#{paramYear }, #{paramMonth })

                        UNION ALL

                        SELECT    STOCK_DAY		as	stock_day
                                , i_qty		    as  i_qty
                                , i_amt         as  i_amt
                                , ib_qty        as  ib_qty
                                , ib_amt        as  ib_amt
                                , o_qty         as  o_qty
                                , o_amt         as  o_amt
                                , oj_qty        as  oj_qty
                                , oj_amt        as  oj_amt
                                , ob_qty        as  ob_qty
                                , ob_amt        as  ob_amt
                                , ox_qty        as  ox_qty
                                , ox_amt        as  ox_amt
                                , oz_qty        as  oz_qty
                                , oz_amt        as  oz_amt
                                , @w_qty := @w_qty + ifnull(sum(i_qty),0) - (ifnull(sum(o_qty),0)+ifnull(sum(oj_qty),0)+ifnull(sum(ox_qty),0)+ifnull(sum(oz_qty),0)) + ifnull(sum(ob_qty),0) as j_qty
                                FROM SSTOCKTB
                                WHERE PROD_CD = #{paramProdCd }
                                  AND  left(STOCK_DAY, 6) =  CONCAT(#{paramYear }, #{paramMonth })
                                GROUP BY stock_day
                                ORDER BY stock_day
                    ) a
    </select>

    <!-- 입출재고조회(년)  -->
    <select id="sal4220_list" resultType="java.util.HashMap">
        SET @w_qty:=0, @wb_qty:=0;

        SELECT    a.STOCK_DAY           as  stockDay
                , ifnull(a.i_qty,0)     as  iQty
                , ifnull(a.i_amt,0)     as  iAmt
                , ifnull(a.ib_qty,0)    as  ibQty
                , ifnull(a.ib_amt,0)    as  ibAmt
                , ifnull(a.o_qty,0)     as  oQty
                , ifnull(a.o_amt,0)     as  oAmt
                , ifnull(a.oj_qty,0)    as  ojQty
                , ifnull(a.oj_amt,0)    as  ojAmt
                , ifnull(a.ob_qty,0)    as  obQty
                , ifnull(a.ob_amt,0)    as  obAmt
                , ifnull(a.ox_qty,0)    as  oxQty
                , ifnull(a.ox_amt,0)    as  oxAmt
                , ifnull(a.oz_qty,0)    as  ozQty
                , ifnull(a.oz_amt,0)    as  ozAmt
                , ifnull(a.o_qty,0) + ifnull(a.oj_qty,0) + ifnull(a.ox_qty,0) as otQty
                , @w_qty := @w_qty + ifnull(a.i_qty,0) - (ifnull(a.o_qty,0)+ifnull(a.oj_qty,0)+ifnull(a.ox_qty,0)+ifnull(a.oz_qty,0)) + ifnull(a.ob_qty,0) as jQty
            FROM (
                    SELECT    concat(#{paramYear }, "00") as STOCK_DAY
                            , 0             as  i_qty
                            , 0             as  i_amt
                            , 0             as  ib_qty
                            , 0             as  ib_amt
                            , 0             as  o_qty
                            , 0             as  o_amt
                            , 0             as  oj_qty
                            , 0             as  oj_amt
                            , 0             as  ob_qty
                            , 0             as  ob_amt
                            , 0             as  ox_qty
                            , 0             as  ox_amt
                            , 0             as  oz_qty
                            , 0             as  oz_amt
                            , 0             as  ot_qty
                            , @w_qty := @w_qty + ifnull(sum(i_qty),0) - (ifnull(sum(o_qty),0)+ifnull(sum(oj_qty),0)+ifnull(sum(ox_qty),0)+ifnull(sum(oz_qty),0)) + ifnull(sum(ob_qty),0)  as j_qty
                        FROM SSTOCKTB

                        WHERE PROD_CD = #{paramProdCd }
                          AND left(STOCK_DAY, 4)  <![CDATA[ < ]]>  #{paramYear }

                    UNION ALL

                        SELECT    left(STOCK_DAY,6)         as  STOCK_DAY
                                , ifnull(sum(i_qty), 0)     as  i_qty
                                , ifnull(sum(i_amt), 0)     as  i_amt
                                , ifnull(sum(ib_qty), 0)    as  ib_qty
                                , ifnull(sum(ib_amt), 0)    as  ib_amt
                                , ifnull(sum(o_qty), 0)     as  o_qty
                                , ifnull(sum(o_amt), 0)     as  o_amt
                                , ifnull(sum(oj_qty), 0)    as  oj_qty
                                , ifnull(sum(oj_amt), 0)    as  oj_amt
                                , ifnull(sum(ob_qty), 0)    as  ob_qty
                                , ifnull(sum(ob_amt), 0)    as  ob_amt
                                , ifnull(sum(ox_qty), 0)    as  ox_qty
                                , ifnull(sum(ox_amt), 0)    as  ox_amt
                                , ifnull(sum(oz_qty), 0)    as  oz_qty
                                , ifnull(sum(oz_amt), 0)    as  oz_amt
                                , 0                         as  jb_qty
                                , 0                         as  j_qty
                            FROM SSTOCKTB
                            WHERE PROD_CD = #{paramProdCd }
                              AND  left(STOCK_DAY, 4) =  #{paramYear }
                            GROUP BY left(STOCK_DAY, 6)
                            ORDER BY STOCK_DAY

                ) a
    </select>

    <!-- 거래처별 원장  -->
    <select id="sal4310_list" resultType="java.util.HashMap">
        drop TEMPORARY TABLE if exists TMP_WORK_TB;

        CREATE TEMPORARY TABLE IF NOT EXISTS TMP_WORK_TB

        SELECT
                  @rowNum := @rowNum + 1  as  row_no
                , a.sale_ym
                , a.SALE_DAY
                , a.SEQ
                , a.io_div
                , a.PROD_CD
                , a.PROD_NM
                , CUSTS_CD
                , DIV_CD
                , a.fg
                , a.fg_nm
                , a.cnt
                , a.o_qty
                , a.o_amt
                , a.b_qty
                , a.b_amt
                , a.price
                , a.yul
                , a.income_amt
                , a.REMARKS
                FROM (
                        SELECT    left(dd.DEAL_DAY,6)   as  sale_ym
                                , dd.DEAL_DAY           as  SALE_DAY
                                , dd.SEQ				as	SEQ
                                , '1'                 as  io_div
                                , dd.PROD_CD          as  PROD_CD
                                , mp.PROD_NM          as  PROD_NM
                                , dd.CUSTS_CD         as  CUSTS_CD
                                , dd.DIV_CD           as  DIV_CD
                                , dd.DEAL_FG         as  fg
                                , c1.COMM_NM          as  fg_nm
                                , count(*)-1          as  cnt
                                , if(dd.DIV_CD = '1', sum(ifnull(dd.QTY, 0)), 0)     as  o_qty
                                , if(dd.DIV_CD = '1', sum(ifnull(dd.AMT, 0)), 0)     as  o_amt
                                , if(dd.DIV_CD = '9', sum(ifnull(dd.QTY, 0)), 0)     as  b_qty
                                , if(dd.DIV_CD = '9', sum(ifnull(dd.AMT, 0)), 0)     as  b_amt
                                , dd.PRICE      as  price
                                , dd.YUL        as  yul
                                , 0                   as  income_amt
                                , dd.REMARKS          as  REMARKS
                                FROM SDEALDTB dd
                                    left outer join MPRODTB as mp on mp.PROD_CD = dd.PROD_CD
                                    left outer join MCOMMTB as c1 ON c1.COMM_CD = dd.DEAL_FG

                                WHERE dd.CUST_CD        =   #{paramCustCd }
                                  AND dd.DEAL_DAY BETWEEN   #{paramPeriodFrom } AND #{paramPeriodTo }
                                  AND dd.DEAL_FG != '1980'
                                GROUP BY dd.DEAL_DAY, CUSTS_CD, dd.SEQ

                            UNION ALL

                        SELECT
                                  left(ac.ACC_DAY,6)    as  sale_ym
                                , ac.ACC_DAY            as  SALE_DAY
                                , ac.SEQ        		as	SEQ
                                , '2'           		as  io_div
                                , ''            		as  PROD_CD
                                , case
                                        when acc_fg = '1' then  '입금(현금)'
                                        when acc_fg = '2' then  '입금(어음)'
                                        when acc_fg = '3' then  '입금(은행)'
                                        when acc_fg = '4' then  '입금(카드)'
                                        when acc_fg = '5' then  '입금(공제)'
                                        else    '기타'
                                        end     as  PROD_NM
                                , ''            as  CUSTS_CD
                                , ''            as  DIV_CD
                                , ''            as  fg
                                , ''            as  fg_nm
                                , 0             as  cnt
                                , 0             as  o_qty
                                , 0             as  o_amt
                                , 0             as  b_qty
                                , 0             as  b_amt
                                , 0             as  price
                                , 0             as  yul
                                , ac.AMT        as  income_amt
                                , ac.REMARKS        as  REMARKS
                            FROM SACCTB ac
                            WHERE ac.CUST_CD      =  #{paramCustCd }
                              AND ac.ACC_DAY   BETWEEN #{paramPeriodFrom } AND #{paramPeriodTo }
                    ) a, (select @rowNum := 0) x
                    ORDER BY a.SALE_DAY, a.io_div, a.SEQ;

        -- 출력 부분
        SELECT
                  b.row_no                          as  rowNum
                , b.sale_ym                         as  saleYm
                , b.SALE_DAY                        as  saleDay
                , b.SEQ                             as  seq
                , b.io_div                          as  io
                , b.PROD_CD                         as  prodCd
                , (case when b.SALE_DAY = '00000000' then  '[ 전월이월 ]'
                        when b.sale_ym is null        then  '[ 총    계 ]'
                        when b.row_no  is null        then  '[ 월    계 ]'
                    else b.PROD_NM end)             as  prodNm
                , b.CUSTS_CD                        as  custsCd
                , b.DIV_CD                          as  divCd
                , b.fg                              as  fg
                , b.fg_nm                           as  fgNm
                , b.cnt                             as  cnt         -- 외종
                , b.o_qty                           as  oQty
                , b.o_amt                           as  oAmt
                , b.b_qty                           as  bQty
                , b.b_amt                           as  bAmt
                , b.price                           as  price
                , b.yul                             as  yul
                , b.income_amt                      as  accAmt
                , (case when b.row_no is not null then @w_amt := @w_amt + b.o_amt - b.b_amt - b.income_amt else '0' end)   as  jAmt
                , b.REMARKS                         as  remarks
            FROM (
                    SELECT
                              '0'           as  row_no
                            , '000000'      as  sale_ym
                            , '00000000'    as  SALE_DAY
                            , 0			    as	SEQ
                            , '0'           as  io_div
                            , ''            as  PROD_CD
                            , ''            as  PROD_NM
                            , ''            as  CUSTS_CD
                            , 0             as  DIV_CD
                            , 0             as  fg
                            , 0             as  fg_nm
                            , 0             as  cnt
                            , 0             as  o_qty
                            , 0             as  o_amt
                            , 0             as  b_qty
                            , 0             as  b_amt
                            , 0             as  price
                            , 0             as  yul
                            , 0             as  income_amt
                            , @w_amt := ifnull(sum(ts.O_AMT),0)-ifnull(sum(ts.OB_AMT),0)-ifnull(sum(ts.IN_AMT),0) as jan_amt
                            , ''          as  REMARKS
                        FROM STSALETB ts,  (select @w_amt:=0) x
                        WHERE ts.CUST_CD       =    #{paramCustCd }
                          AND ts.SALE_DAY  <![CDATA[ < ]]>  #{paramPeriodFrom }

                UNION ALL

                    SELECT
                              t1.row_no     as  row_no
                            , t1.sale_ym    as  sale_ym
                            , t1.SALE_DAY   as  SALE_DAY
                            , t1.SEQ		as	SEQ
                            , t1.io_div     as  io_div
                            , t1.PROD_CD    as  PROD_CD
                            , t1.PROD_NM    as  PROD_NM
                            , t1.CUSTS_CD   as  CUSTS_CD
                            , t1.DIV_CD     as  DIV_CD
                            , t1.fg         as  fg
                            , t1.fg_nm      as  fg_nm
                            , t1.cnt        as  cnt
                            , sum(t1.o_qty) as  o_qty
                            , sum(t1.o_amt) as  o_amt
                            , sum(t1.b_qty) as  b_qty
                            , sum(t1.b_amt) as  b_amt
                            , t1.price      as  price
                            , t1.yul        as  yul
                            , sum(t1.income_amt)    as  income_amt
                            , 0             as  jan_amt
                            , t1.REMARKS    as  REMARKS
                        FROM TMP_WORK_TB t1
                        GROUP BY t1.sale_ym, t1.row_no
                        WITH ROLLUP
                ) b, (select @w_amt := 0) y
    </select>


    <!-- 도서별 입출고원장 불러오기  -->
    <select id="sal4320_list" resultType="java.util.HashMap">
        SET @rownum:=0;

        SELECT b.row_no         as  rowNum
             , b.sale_ym         as  saleYm
             , b.sale_day        as  saleDay
             , b.cust_cd         as  custCd
             , if(b.cust_nm='일계', b.cust_nm, cu1.cust_nm) as custNm
             , b.div_cd          as  divCd
             , b.fg              as  fg
             , b.fg_nm           as  fgNm
             , b.i_qty           as  iQty
             , b.ib_qty          as  ibQty
             , b.o_qty           as  oQty
             , b.oj_qty          as  ojQty
             , b.ob_qty          as  obQty
             , b.ox_qty          as  oxQty
             , b.oz_qty          as  ozQty
             , b.j_qty           as  jQty
             , b.remarks         as  remarks

        FROM (
                 SELECT a.row_no
                      , (case when a.sale_ym is not null then a.sale_ym else '총계' end)  as  sale_ym
                      , (case when a.sale_day is not null then a.sale_day else '월계' end)  as  sale_day
                      , a.cust_cd
                      , (case when a.row_no is not null then a.cust_nm else '일계' end) as  cust_nm
                      , a.div_cd
                      , a.fg
                      , a.fg_nm
                      , sum(a.i_qty)    as  i_qty
                      , sum(a.ib_qty)   as  ib_qty
                      , sum(a.o_qty)    as  o_qty
                      , sum(a.oj_qty)   as  oj_qty
                      , sum(a.ob_qty)   as  ob_qty
                      , sum(a.ox_qty)   as  ox_qty
                      , sum(a.oz_qty)   as  oz_qty
                      , (case when a.row_no is not null then @w_qty := @w_qty + (sum(a.i_qty) + sum(a.ib_qty)) - (sum(a.o_qty) + sum(a.oj_qty) + sum(a.ox_qty) + sum(a.oz_qty) - sum(a.ob_qty)) else '0' end)    as j_qty
                      , a.remarks

                 FROM (
                          SELECT   @rownum:=@rownum+1    as  row_no
                    , '000000'             as  sale_ym
                    , '00000000'           as  sale_day
                    , '0'                  as  io_div
                    , ''                   as  cust_cd
                    , ''                   as  cust_nm
                    , ''                   as  div_cd
                    , ''                   as  fg
                    , ''                   as  fg_nm
                    , 0                    as  i_qty
                    , 0                    as  ib_qty
                    , 0                    as  o_qty
                    , 0                    as  oj_qty
                    , 0                    as  ob_qty
                    , 0                    as  ox_qty
                    , 0                    as  oz_qty
                    , @w_qty := (ifnull(sum(st.I_QTY),0)+ifnull(sum(st.IB_QTY),0))-(ifnull(sum(st.O_QTY),0)+ifnull(sum(st.OJ_QTY),0)+ifnull(sum(st.OX_QTY),0)+ifnull(sum(st.OZ_QTY),0)-ifnull(sum(st.OB_QTY),0)) as j_qty
                    , '' as remarks
                          FROM SSTOCKTB st,  (select @w_qty:=0) x

                          WHERE st.PROD_CD		=    #{paramProdCd }
                            AND st.STOCK_DAY	<![CDATA[<]]> 	#{paramPeriodFrom }

                          UNION ALL

                          SELECT
                              @rownum:=@rownum+1      as  row_no
                                  , left(bi.BUY_DAY,6)   	as  sale_ym
                                  , bi.BUY_DAY	            as  sale_day
                                  , '1'                     as  io_div
                                  , bi.CUST_CD              as  cust_cd
                                  , cu.CUST_NM              as  cust_nm
                                  , bi.DIV_CD               as  div_cd
                                  , bi.BUY_FG	            as  fg
                                  , c1.COMM_NM              as  fg_nm
                                  , if(bi.BUY_FG = '3021101', bi.QTY, if(bi.BUY_FG = '3021103', bi.QTY,  if(bi.BUY_FG = '3021104', bi.QTY, if(bi.BUY_FG = '3021105', bi.QTY, if(bi.BUY_FG = '3021106', bi.QTY, 0))))) as  i_qty
                                  , if(bi.BUY_FG = '3021102', bi.QTY, 0) as  ib_qty
                                  , 0                       as  o_qty
                                  , 0                       as  oj_qty
                                  , 0                       as  ob_qty
                                  , 0                       as  ox_qty
                                  , 0                       as  oz_qty
                                  , 0                       as  j_qty
                                  , bi.REMARKS              as  remarks
                          FROM SBUYDTB bi

                              left outer join MCUSTTB as cu ON cu.CUST_CD = bi.CUST_CD
                              left outer join MCOMMTB as c1 ON c1.COMM_CD = bi.BUY_FG

                          WHERE bi.PROD_CD =  #{paramProdCd }
                            AND bi.BUY_DAY   BETWEEN #{paramPeriodFrom } AND #{paramPeriodTo }

                          union all

                          SELECT
                              @rownum:=@rownum+1 	as  row_no
                                  , left(bo.DEAL_DAY,6) as 	sale_ym
                                  , bo.DEAL_DAY  	as 	sale_day
                                  , '2' 			as 	io_div
                                  , bo.CUST_CD   	as  cust_cd
                                  , cu.CUST_NM   	as  cust_nm
                                  , bo.DIV_CD    	as  div_cd
                                  , bo.DEAL_FG  	as  fg
                                  , c1.COMM_NM  	as  fg_nm
                                  , 0              as  i_qty
                                  , 0              as  ib_qty
                                  , if(bo.DIV_CD = '1', if(bo.DEAL_FG = '4021101', bo.QTY, if(bo.DEAL_FG = '4021102', bo.QTY, if(bo.DEAL_FG = '4021103', bo.QTY, if(bo.DEAL_FG = '4021104', bo.QTY, if(bo.DEAL_FG = '4021108', bo.QTY, if(bo.DEAL_FG = '4021109', bo.QTY, 0)))))),0) as  o_qty
                                  , if(bo.DIV_CD = '1', if(bo.DEAL_FG = '4021205', bo.QTY, 0),0) as  oj_qty
                                  , if(bo.DIV_CD = '9' AND bo.DEAL_FG != '4021980', bo.QTY,0) as  ob_qty
                                  , if(bo.DIV_CD = '1', if(bo.DEAL_FG = '4021990', bo.QTY, 0),0) as  ox_qty
                                  , if(bo.DEAL_FG = '4021980', if(bo.DIV_CD = '1', bo.QTY, 0-bo.QTY),0) as  oz_qty
                                  , 0        		    as  j_qty
                                  , bo.REMARKS     	as  remarks
                          FROM SDEALDTB bo

                              left outer join MCUSTTB as cu ON cu.CUST_CD 	= 	bo.CUST_CD
                              left outer join MCOMMTB as c1 ON c1.COMM_CD	= 	bo.DEAL_FG

                          WHERE bo.PROD_CD =  #{paramProdCd }
                            AND bo.DEAL_DAY   BETWEEN #{paramPeriodFrom } AND #{paramPeriodTo }

                      ) a,  (select @w_qty:=0) y

                 group by a.sale_ym, a.sale_day, a.row_no
                     with rollup

             ) b

                 left outer join MCUSTTB as cu1 ON cu1.cust_cd = b.cust_cd

        where 1=1

          and  !(b.sale_ym = '000000' and b.sale_day = '00000000' and b.cust_nm ='일계')
          and  !(b.sale_ym = '000000' and b.sale_day = '월계')
    </select>


    <!-- 순출고누계현황  -->
    <select id="sal4410_list" resultType="java.util.HashMap">
        drop TEMPORARY TABLE if exists TMP_WORK_TB;

        CREATE TEMPORARY TABLE IF NOT EXISTS TMP_WORK_TB

        SELECT    a.PROD_CD                                -- 코드
                , ifnull(SUM(sAmt),0)       as  s_amt       -- 선인세누계
                , ifnull(SUM(ITOT),0)       as  itot_qty    -- 총 재작누계(입고누계)
                , ifnull(SUM(SQ),0)         as  stock_qty   -- 재고수량
                , ifnull(SUM(M1),0)         as  m1_qty      -- 기준월 출고수량
                , ifnull(SUM(M6),0)         as  m6_qty      -- 기준일 6개월 합
                , ifnull(SUM(M12),0)        as  m12_qty     -- 기준일 12개월합
                , ifnull(SUM(OTOT),0)       as  tot_qty     -- 총 출고수량
            FROM (
                    SELECT PROD_CD, 0                    as  sAmt, ifnull(sum(i_qty),0) as ITOT, 0                                            as M1, 0                                            as M6,  0                                           as M12, 0                                             as OTOT, 0                                                                  as SQ FROM SSTOCKTB WHERE STOCK_DAY BETWEEN #{paramPeriodFrom } and #{paramPeriodTo } group by PROD_CD
                    union all
                    SELECT PROD_CD, 0                    as  sAmt, 0                    as ITOT, 0                                            as M1, 0                                            as M6,  0                                           as M12, 0                                             as OTOT, ifnull(sum(i_qty),0) - ( ifnull(sum(o_qty),0) + ifnull(sum(oj_qty),0) + ifnull(sum(ox_qty),0) + ifnull(sum(oz_qty),0) ) + ifnull(sum(ob_qty),0)  as SQ FROM SSTOCKTB WHERE STOCK_DAY <![CDATA[<=]]> #{paramPeriodTo } group by PROD_CD
                    union all
                    SELECT PROD_CD, 0                    as  sAmt, 0                    as ITOT, ifnull(sum(o_qty),0) - ifnull(sum(ob_qty),0) as M1, 0                                            as M6,  0                                           as M12, 0                                             as OTOT, 0                                                                  as SQ FROM SSTOCKTB WHERE STOCK_DAY BETWEEN #{paramPeriodFrom } AND #{paramPeriodTo } group by PROD_CD
                    union all
                    SELECT PROD_CD, 0                    as  sAmt, 0                    as ITOT, 0                                            as M1, ifnull(sum(o_qty),0) - ifnull(sum(ob_qty),0) as M6,  0                                           as M12, 0                                             as OTOT, 0                                                                  as SQ FROM SSTOCKTB WHERE STOCK_DAY BETWEEN concat(#{paramStdDayM6 }, '01')       AND #{paramPeriodTo } group by PROD_CD
                    union all
                    SELECT PROD_CD, 0                    as  sAmt, 0                    as ITOT, 0                                            as M1, 0                                            as M6, ifnull(sum(o_qty),0) - ifnull(sum(ob_qty),0) as M12, 0                                             as OTOT, 0                                                                  as SQ FROM SSTOCKTB WHERE STOCK_DAY BETWEEN concat(#{paramStdDayM12 }, '01')      AND #{paramPeriodTo } group by PROD_CD
                    union all
                    SELECT PROD_CD, 0                    as  sAmt, 0                    as ITOT, 0                                            as M1, 0                                            as M6,  0                                           as M12, ifnull(sum(o_qty),0) - ifnull(sum(ob_qty),0)  as OTOT, 0                                                                  as SQ FROM SSTOCKTB WHERE STOCK_DAY <![CDATA[<=]]> #{paramPeriodTo } group by PROD_CD
                    union all
                    SELECT PROD_CD, sum(ifnull(s_amt,0)) as  sAmt, 0                    as ITOT, 0                                            as M1, 0                                            as M6,  0                                           as M12, 0                       as OTOT, 0                                                                  as SQ FROM SFEESTTB WHERE concat(proc_year, proc_month)  <![CDATA[<=]]>  left(#{paramPeriodTo },6) group by PROD_CD
                ) a

                    left outer join MPRODTB as mp ON mp.PROD_CD  = a.PROD_CD

                WHERE a.PROD_CD != '0000'
                     <if test='paramProdDiv != null and paramProdDiv != ""'>
                       AND mp.PROD_DIV = #{paramProdDiv }
                     </if>
                GROUP BY a.PROD_CD
                ORDER BY a.PROD_CD asc;


        SELECT    t.PROD_CD             as  prodCd            -- 코드
                , mp.PROD_NM            as  prodNm           -- 도서명
                , sum(t.itot_qty)       as  itotQty          -- 총 재작누계(입고누계)
                , sum(t.stock_qty)      as  stockQty         -- 재고수량
                , sum(t.m1_qty)         as  m1Qty            -- 기준월 출고수량
                , sum(t.m6_qty)         as  m6Qty            -- 기준일 6개월 합
                , sum(t.m12_qty)        as  m12Qty           -- 기준일 12개월합
                , sum(t.tot_qty)        as  totQty           -- 총 출고수량
                , mp.pub_day            as  pubDay           -- 출간일
                , mp.author_nm          as  authorNm         -- 저자
                , mp.p1_page            as  p1Page           -- 쪽수
                , mp.sun_nm             as  sunNm            -- 선서자
                , sum(ROUND(t.s_amt/1000000 ,1)) as  sAmt   -- 선인세
                , mp.s_price            as  sPrice          -- 정가
                , mp.copyright_nm       as  copyrightNm     -- 저작권사
                , mp.agent_cd           as  agentCd         -- 에이젠트코드
                , ma.AGENT_NM           as  agentNm         -- 에이젠트
                FROM TMP_WORK_TB t

                    -- 도서코드
                    left outer join MPRODTB as mp ON mp.PROD_CD  = t.PROD_CD
                    -- 공통코드 (에이젠트 1202 )
                    left outer join MAGENTTB as ma ON ma.AGENT_CD = mp.AGENT_CD

        WHERE 1=1
            <if test='paramValue != null and paramValue != ""'>
                AND ( mp.PROD_NM LIKE CONCAT( '%', #{paramValue }, '%' )
                    OR  t.PROD_CD LIKE CONCAT( '%', #{paramValue }, '%')
                    OR  ma.AGENT_NM LIKE CONCAT( '%', #{paramValue }, '%')
                    OR  mp.COPYRIGHT_NM LIKE CONCAT( '%', #{paramValue }, '%')
                    OR  mp.SUN_NM LIKE CONCAT( '%', #{paramValue }, '%')
                )
            </if>

        GROUP BY t.PROD_CD
        -- WITH ROLLUP
    </select>


    <!-- 연구원판배집계표  -->
    <select id="sal4420_list" resultType="java.util.HashMap">
        SELECT
              a.PROD_CD       as  prodCd                                      -- 도서코드
            , mp.PROD_NM      as  prodNm                                     -- 도서명
            , mp.S_PRICE      as  sPrice                                     -- 정가
            , sum(a.wj_qty)   as  wjQty                                      -- 전월재고량
            , sum(a.i_qty)    as  iQty                                       -- 당월입고
            , sum(a.wj_qty) + sum(a.i_qty)  	as  tjQty                      -- 총재고
            , sum(a.o_qty)  + sum(a.oj_qty) 	as  otQty                      -- 당월총출고수량
            , sum(a.o_qty)    as  oQty                                       -- 당월출고수량
            , sum(a.o_amt)    as  oAmt                                       -- 당월출고금액
            , sum(a.ob_amt)   as  obAmt                                      -- 당월반품금액
            , (sum(a.o_amt) - sum(a.ob_amt))  as  odAmt                      -- 실매출액(SB계산서발행)
            , sum(a.ob_qty)   as  obQty                                      -- 당월 반품수량
            , sum(a.oj_qty)   as  ojQty                                      -- 당월증정수량
            , sum(a.o_qty) - sum(a.ob_qty)  	as odQty         							-- 순 출고수량
            , sum(a.ox_qty)   as  oxQty                                      -- 당월폐기수량
            , sum(a.oz_qty)   as  ozQty                                      -- 당월재고조정수량
            ,(sum(a.wj_qty) +  sum(a.i_qty)) - (sum(a.o_qty) + sum(a.ox_qty) + sum(a.oz_qty)) +  sum(a.ob_qty) - sum(a.oj_qty) as  jQty   -- 당월재고수량
            ,truncate((sum(a.o_qty) - sum(a.ob_qty)) * (mp.S_PRICE * 0.47),0) as  idAmt    -- 실매입금액(SB계산서수취)
            ,truncate((sum(a.o_amt) - sum(a.ob_amt)) - ((sum(a.o_qty) - sum(a.ob_qty)) * mp.S_PRICE * 0.47),0)  as  jdAmt  -- 당월미수금(미지급금)
        FROM  (
                SELECT    PROD_CD
                        , ifnull(sum(i_qty),0) - ( ifnull(sum(o_qty),0)+ifnull(sum(oj_qty),0)+ifnull(sum(ox_qty),0)+ifnull(sum(oz_qty),0) ) + ifnull(sum(ob_qty),0) as wj_qty    -- 전월재고
                        , 0  as  i_qty                                                                                              -- 당월 입고수량
                        , 0  as  o_qty                                                                                              -- 당월 출고수량
                        , 0  as  ob_qty                                                                                             -- 당월 반품수량
                        , 0  as  oj_qty                                                                                             -- 당월 증정수량
                        , 0  as  ox_qty                                                                                             -- 당월 폐기수량
                        , 0  as  oz_qty                                                                                             -- 당월 조정수량
                        , 0  as  o_amt                                                                                              -- 당월 출고금액
                        , 0  as  ob_amt                                                                                             -- 당월 반품금액
                    FROM SSTOCKTB
                    WHERE left(STOCK_DAY, 6)  <![CDATA[<]]>  CONCAT(#{paramYear} , #{paramMonth}) AND NOT(i_qty=0 AND ib_qty=0 AND o_qty=0 AND oj_qty=0 AND ox_qty=0 AND oz_qty=0 AND ob_qty=0)
                    GROUP BY PROD_CD

                UNION ALL

                SELECT    PROD_CD
                        , 0                     as  wj_qty
                        , ifnull(sum(i_qty),0)  as  i_qty
                        , ifnull(sum(o_qty),0)  as  o_qty
                        , ifnull(sum(ob_qty),0) as  ob_qty
                        , ifnull(sum(oj_qty),0) as  oj_qty
                        , ifnull(sum(ox_qty),0) as  ox_qty
                        , ifnull(sum(oz_qty),0) as  oz_qty
                        , ifnull(sum(o_amt),0)  as  o_amt
                        , ifnull(sum(ob_amt),0) as  ob_amt
                    FROM  SSTOCKTB
                    WHERE left(STOCK_DAY,6) = CONCAT(#{paramYear} , #{paramMonth}) AND NOT(i_qty=0 AND ib_qty=0 AND o_qty=0 AND oj_qty=0 AND ox_qty=0 AND oz_qty=0 AND ob_qty=0)
                    GROUP BY PROD_CD
            ) a

                left outer join MPRODTB as mp ON mp.PROD_CD = a.PROD_CD

            WHERE 1=1

            <if test='paramProdDiv != null and paramprodDiv != ""'>
                AND mp.PROD_DIV = #{paramProdDiv }
            </if>

            <if test='paramValue != null and paramValue != ""'>
                AND ( mp.PROD_NM LIKE CONCAT( '%', #{paramValue }, '%' )
                    OR  a.PROD_CD LIKE CONCAT( '%', #{paramValue }, '%')
                )
            </if>

        GROUP BY a.PROD_CD;
    </select>


    <!-- 거래처별 잔액명세서(월) -->
    <select id="sal4430_list" resultType="java.util.HashMap">
        SELECT    b.cust_cd                                  as  custCd
                , mc.CUST_NM                                 as  custNm
                , b.w_amt                                    as  wAmt
                , b.o_amt                                    as  oAmt
                , b.o_qty                                    as  oQty
                , b.ob_amt                                   as  obAmt
                , b.ob_qty                                   as  obQty
                , b.oj_qty                                   as  ojQty
                , b.in_amt                                   as  inAmt
                , b.w_amt + b.o_amt - b.ob_amt - b.in_amt    as  jAmt
            FROM (
                    SELECT    a.cust_cd                                  as  cust_cd
                            , ifnull(sum(a.w_amt),0)                     as  w_amt
                            , ifnull(sum(a.o_amt),0)                     as  o_amt
                            , ifnull(sum(a.o_qty),0)                     as  o_qty
                            , ifnull(sum(a.ob_amt),0)                    as  ob_amt
                            , ifnull(sum(a.ob_qty),0)                    as  ob_qty
                            , ifnull(sum(a.oj_qty),0)                    as  oj_qty
                            , ifnull(sum(a.in_amt),0)                    as  in_amt
                        FROM (
                    SELECT    cust_cd
                            , (ifnull(sum(O_AMT),0) - ifnull(sum(OB_AMT),0) - ifnull(sum(IN_AMT),0)) as w_amt
                            , 0                                              as  o_amt
                            , 0                                              as  o_qty
                            , 0                                              as  ob_amt
                            , 0                                              as  ob_qty
                            , 0                                              as  oj_qty
                            , 0                                              as  in_amt
                        FROM STSALETB WHERE left(SALE_DAY, 6)  <![CDATA[<]]>    CONCAT(#{paramYear}, #{paramMonth})
                        GROUP by cust_cd
                UNION ALL
                    SELECT    cust_cd
                            , 0                                        as w_amt
                            , ifnull(sum(O_AMT),0)                     as o_amt
                            , ifnull(sum(O_QTY),0)                     as o_qty
                            , ifnull(sum(OB_AMT),0)                    as ob_amt
                            , ifnull(sum(OB_QTY),0)                    as ob_qty
                            , ifnull(sum(OJ_QTY),0)                    as oj_qty
                            , ifnull(sum(IN_AMT),0)                    as in_amt
                        FROM STSALETB WHERE left(SALE_DAY, 6) = CONCAT(#{paramYear}, #{paramMonth})
                        GROUP by cust_cd
                ) a
            WHERE 1=1
              AND !(ifnull(a.w_amt,0) = 0 AND ifnull(a.o_amt,0) = 0 AND ifnull(a.ob_amt,0) = 0 AND ifnull(a.in_amt,0) = 0)
            GROUP BY a.CUST_CD

        ) b
            left outer join MCUSTTB as mc ON mc.CUST_CD  = b.CUST_CD

        WHERE 1=1
          AND mc.CUST_NM    != ''
            <if test='paramValue != null and paramValue != ""'>
                AND ( mc.CUST_NM LIKE CONCAT( '%', #{paramValue }, '%' )
                OR  b.cust_cd LIKE CONCAT( '%', #{paramValue }, '%')
                )
            </if>
        ORDER BY b.cust_cd

    </select>


    <!-- 거래처별 잔액명세서(년) -->
    <select id="sal4440_list" resultType="java.util.HashMap">
        SELECT
               b.cust_cd                   as  custCd
             , mc.CUST_NM                  as  custNm

             , ifnull(sum(w_amt),0)        as  wAmt

             , ifnull(sum(b.o_01_qty),0)  as m01OQty
             , ifnull(sum(b.o_02_qty),0)  as m02OQty
             , ifnull(sum(b.o_03_qty),0)  as m03OQty
             , ifnull(sum(b.o_04_qty),0)  as m04OQty
             , ifnull(sum(b.o_05_qty),0)  as m05OQty
             , ifnull(sum(b.o_06_qty),0)  as m06OQty
             , ifnull(sum(b.o_07_qty),0)  as m07OQty
             , ifnull(sum(b.o_08_qty),0)  as m08OQty
             , ifnull(sum(b.o_09_qty),0)  as m09OQty
             , ifnull(sum(b.o_10_qty),0)  as m10OQty
             , ifnull(sum(b.o_11_qty),0)  as m11OQty
             , ifnull(sum(b.o_12_qty),0)  as m12OQty

             , ifnull(sum(b.o_01_amt),0)  as m01OAmt
             , ifnull(sum(b.o_02_amt),0)  as m02OAmt
             , ifnull(sum(b.o_03_amt),0)  as m03OAmt
             , ifnull(sum(b.o_04_amt),0)  as m04OAmt
             , ifnull(sum(b.o_05_amt),0)  as m05OAmt
             , ifnull(sum(b.o_06_amt),0)  as m06OAmt
             , ifnull(sum(b.o_07_amt),0)  as m07OAmt
             , ifnull(sum(b.o_08_amt),0)  as m08OAmt
             , ifnull(sum(b.o_09_amt),0)  as m09OAmt
             , ifnull(sum(b.o_10_amt),0)  as m10OAmt
             , ifnull(sum(b.o_11_amt),0)  as m11OAmt
             , ifnull(sum(b.o_12_amt),0)  as m12OAmt

             , ifnull(sum(b.ob_01_qty),0)  as m01ObQty
             , ifnull(sum(b.ob_02_qty),0)  as m02ObQty
             , ifnull(sum(b.ob_03_qty),0)  as m03ObQty
             , ifnull(sum(b.ob_04_qty),0)  as m04ObQty
             , ifnull(sum(b.ob_05_qty),0)  as m05ObQty
             , ifnull(sum(b.ob_06_qty),0)  as m06ObQty
             , ifnull(sum(b.ob_07_qty),0)  as m07ObQty
             , ifnull(sum(b.ob_08_qty),0)  as m08ObQty
             , ifnull(sum(b.ob_09_qty),0)  as m09ObQty
             , ifnull(sum(b.ob_10_qty),0)  as m10ObQty
             , ifnull(sum(b.ob_11_qty),0)  as m11ObQty
             , ifnull(sum(b.ob_12_qty),0)  as m12ObQty

             , ifnull(sum(b.ob_01_amt),0)  as m01ObAmt
             , ifnull(sum(b.ob_02_amt),0)  as m02ObAmt
             , ifnull(sum(b.ob_03_amt),0)  as m03ObAmt
             , ifnull(sum(b.ob_04_amt),0)  as m04ObAmt
             , ifnull(sum(b.ob_05_amt),0)  as m05ObAmt
             , ifnull(sum(b.ob_06_amt),0)  as m06ObAmt
             , ifnull(sum(b.ob_07_amt),0)  as m07ObAmt
             , ifnull(sum(b.ob_08_amt),0)  as m08ObAmt
             , ifnull(sum(b.ob_09_amt),0)  as m09ObAmt
             , ifnull(sum(b.ob_10_amt),0)  as m10ObAmt
             , ifnull(sum(b.ob_11_amt),0)  as m11ObAmt
             , ifnull(sum(b.ob_12_amt),0)  as m12ObAmt

             , ifnull(sum(b.in_01_amt),0)  as m01InAmt
             , ifnull(sum(b.in_02_amt),0)  as m02InAmt
             , ifnull(sum(b.in_03_amt),0)  as m03InAmt
             , ifnull(sum(b.in_04_amt),0)  as m04InAmt
             , ifnull(sum(b.in_05_amt),0)  as m05InAmt
             , ifnull(sum(b.in_06_amt),0)  as m06InAmt
             , ifnull(sum(b.in_07_amt),0)  as m07InAmt
             , ifnull(sum(b.in_08_amt),0)  as m08InAmt
             , ifnull(sum(b.in_09_amt),0)  as m09InAmt
             , ifnull(sum(b.in_10_amt),0)  as m10InAmt
             , ifnull(sum(b.in_11_amt),0)  as m11InAmt
             , ifnull(sum(b.in_12_amt),0)  as m12InAmt

             , @to_amt  := ifnull(sum(b.o_01_amt),0)  + ifnull(sum(b.o_02_amt),0)  + ifnull(sum(b.o_03_amt),0)  + ifnull(sum(b.o_04_amt),0)  + ifnull(sum(b.o_05_amt),0)  + ifnull(sum(b.o_06_amt),0)  + ifnull(sum(b.o_07_amt),0)  + ifnull(sum(b.o_08_amt),0)  + ifnull(sum(b.o_09_amt),0)  + ifnull(sum(b.o_10_amt),0)  + ifnull(sum(b.o_11_amt),0)  + ifnull(sum(b.o_12_amt),0)   as  toAmt
             , @tob_amt := ifnull(sum(b.ob_01_amt),0) + ifnull(sum(b.ob_02_amt),0) + ifnull(sum(b.ob_03_amt),0) + ifnull(sum(b.ob_04_amt),0) + ifnull(sum(b.ob_05_amt),0) + ifnull(sum(b.ob_06_amt),0) + ifnull(sum(b.ob_07_amt),0) + ifnull(sum(b.ob_08_amt),0) + ifnull(sum(b.ob_09_amt),0) + ifnull(sum(b.ob_10_amt),0) + ifnull(sum(b.ob_11_amt),0) + ifnull(sum(b.ob_12_amt),0)  as  tobAmt
             , @tin_amt := ifnull(sum(b.in_01_amt),0) + ifnull(sum(b.in_02_amt),0) + ifnull(sum(b.in_03_amt),0) + ifnull(sum(b.in_04_amt),0) + ifnull(sum(b.in_05_amt),0) + ifnull(sum(b.in_06_amt),0) + ifnull(sum(b.in_07_amt),0) + ifnull(sum(b.in_08_amt),0) + ifnull(sum(b.in_09_amt),0) + ifnull(sum(b.in_10_amt),0) + ifnull(sum(b.in_11_amt),0) + ifnull(sum(b.in_12_amt),0)  as  tinAmt

             , ifnull(sum(w_amt),0)
                + (ifnull(sum(b.o_01_amt),0)  + ifnull(sum(b.o_02_amt),0)  + ifnull(sum(b.o_03_amt),0)  + ifnull(sum(b.o_04_amt),0)  + ifnull(sum(b.o_05_amt),0)  + ifnull(sum(b.o_06_amt),0)  + ifnull(sum(b.o_07_amt),0)  + ifnull(sum(b.o_08_amt),0)  + ifnull(sum(b.o_09_amt),0)  + ifnull(sum(b.o_10_amt),0)  + ifnull(sum(b.o_11_amt),0)  + ifnull(sum(b.o_12_amt),0))
                - (ifnull(sum(b.ob_01_amt),0) + ifnull(sum(b.ob_02_amt),0) + ifnull(sum(b.ob_03_amt),0) + ifnull(sum(b.ob_04_amt),0) + ifnull(sum(b.ob_05_amt),0) + ifnull(sum(b.ob_06_amt),0) + ifnull(sum(b.ob_07_amt),0) + ifnull(sum(b.ob_08_amt),0) + ifnull(sum(b.ob_09_amt),0) + ifnull(sum(b.ob_10_amt),0) + ifnull(sum(b.ob_11_amt),0) + ifnull(sum(b.ob_12_amt),0))
                - (ifnull(sum(b.in_01_amt),0) + ifnull(sum(b.in_02_amt),0) + ifnull(sum(b.in_03_amt),0) + ifnull(sum(b.in_04_amt),0) + ifnull(sum(b.in_05_amt),0) + ifnull(sum(b.in_06_amt),0) + ifnull(sum(b.in_07_amt),0) + ifnull(sum(b.in_08_amt),0) + ifnull(sum(b.in_09_amt),0) + ifnull(sum(b.in_10_amt),0) + ifnull(sum(b.in_11_amt),0) + ifnull(sum(b.in_12_amt),0))
                              as  jAmt

        FROM (
            SELECT cust_cd
                , (ifnull(sum(O_AMT),0) - ifnull(sum(ob_AMT),0) - ifnull(sum(IN_AMT),0)) as w_amt

                , 0              AS  o_01_qty
                , 0              AS  o_02_qty
                , 0              AS  o_03_qty
                , 0              AS  o_04_qty
                , 0              AS  o_05_qty
                , 0              AS  o_06_qty
                , 0              AS  o_07_qty
                , 0              AS  o_08_qty
                , 0              AS  o_09_qty
                , 0              AS  o_10_qty
                , 0              AS  o_11_qty
                , 0              AS  o_12_qty

                , 0              AS  o_01_amt
                , 0              AS  o_02_amt
                , 0              AS  o_03_amt
                , 0              AS  o_04_amt
                , 0              AS  o_05_amt
                , 0              AS  o_06_amt
                , 0              AS  o_07_amt
                , 0              AS  o_08_amt
                , 0              AS  o_09_amt
                , 0              AS  o_10_amt
                , 0              AS  o_11_amt
                , 0              AS  o_12_amt

                , 0              AS  ob_01_qty
                , 0              AS  ob_02_qty
                , 0              AS  ob_03_qty
                , 0              AS  ob_04_qty
                , 0              AS  ob_05_qty
                , 0              AS  ob_06_qty
                , 0              AS  ob_07_qty
                , 0              AS  ob_08_qty
                , 0              AS  ob_09_qty
                , 0              AS  ob_10_qty
                , 0              AS  ob_11_qty
                , 0              AS  ob_12_qty

                , 0              AS  ob_01_amt
                , 0              AS  ob_02_amt
                , 0              AS  ob_03_amt
                , 0              AS  ob_04_amt
                , 0              AS  ob_05_amt
                , 0              AS  ob_06_amt
                , 0              AS  ob_07_amt
                , 0              AS  ob_08_amt
                , 0              AS  ob_09_amt
                , 0              AS  ob_10_amt
                , 0              AS  ob_11_amt
                , 0              AS  ob_12_amt

                , 0              AS  in_01_amt
                , 0              AS  in_02_amt
                , 0              AS  in_03_amt
                , 0              AS  in_04_amt
                , 0              AS  in_05_amt
                , 0              AS  in_06_amt
                , 0              AS  in_07_amt
                , 0              AS  in_08_amt
                , 0              AS  in_09_amt
                , 0              AS  in_10_amt
                , 0              AS  in_11_amt
                , 0              AS  in_12_amt

            FROM STSALETB WHERE left(SALE_DAY, 4)  <![CDATA[<]]> #{paramYear }
            GROUP by cust_cd

            UNION ALL

            SELECT
                cust_cd
                , 0                                                                      AS  w_amt
                , CASE WHEN substring(SALE_DAY, 5,2) = '01' THEN o_qty END              AS  o_01_qty
                , CASE WHEN substring(SALE_DAY, 5,2) = '02' THEN o_qty END              AS  o_02_qty
                , CASE WHEN substring(SALE_DAY, 5,2) = '03' THEN o_qty END              AS  o_03_qty
                , CASE WHEN substring(SALE_DAY, 5,2) = '04' THEN o_qty END              AS  o_04_qty
                , CASE WHEN substring(SALE_DAY, 5,2) = '05' THEN o_qty END              AS  o_05_qty
                , CASE WHEN substring(SALE_DAY, 5,2) = '06' THEN o_qty END              AS  o_06_qty
                , CASE WHEN substring(SALE_DAY, 5,2) = '07' THEN o_qty END              AS  o_07_qty
                , CASE WHEN substring(SALE_DAY, 5,2) = '08' THEN o_qty END              AS  o_08_qty
                , CASE WHEN substring(SALE_DAY, 5,2) = '09' THEN o_qty END              AS  o_09_qty
                , CASE WHEN substring(SALE_DAY, 5,2) = '10' THEN o_qty END              AS  o_10_qty
                , CASE WHEN substring(SALE_DAY, 5,2) = '11' THEN o_qty END              AS  o_11_qty
                , CASE WHEN substring(SALE_DAY, 5,2) = '12' THEN o_qty END              AS  o_12_qty

                , CASE WHEN substring(SALE_DAY, 5,2) = '01' THEN o_amt END              AS  o_01_amt
                , CASE WHEN substring(SALE_DAY, 5,2) = '02' THEN o_amt END              AS  o_02_amt
                , CASE WHEN substring(SALE_DAY, 5,2) = '03' THEN o_amt END              AS  o_03_amt
                , CASE WHEN substring(SALE_DAY, 5,2) = '04' THEN o_amt END              AS  o_04_amt
                , CASE WHEN substring(SALE_DAY, 5,2) = '05' THEN o_amt END              AS  o_05_amt
                , CASE WHEN substring(SALE_DAY, 5,2) = '06' THEN o_amt END              AS  o_06_amt
                , CASE WHEN substring(SALE_DAY, 5,2) = '07' THEN o_amt END              AS  o_07_amt
                , CASE WHEN substring(SALE_DAY, 5,2) = '08' THEN o_amt END              AS  o_08_amt
                , CASE WHEN substring(SALE_DAY, 5,2) = '09' THEN o_amt END              AS  o_09_amt
                , CASE WHEN substring(SALE_DAY, 5,2) = '10' THEN o_amt END              AS  o_10_amt
                , CASE WHEN substring(SALE_DAY, 5,2) = '11' THEN o_amt END              AS  o_11_amt
                , CASE WHEN substring(SALE_DAY, 5,2) = '12' THEN o_amt END              AS  o_12_amt

                , CASE WHEN substring(SALE_DAY, 5,2) = '01' THEN ob_qty END             AS  ob_01_qty
                , CASE WHEN substring(SALE_DAY, 5,2) = '02' THEN ob_qty END             AS  ob_02_qty
                , CASE WHEN substring(SALE_DAY, 5,2) = '03' THEN ob_qty END             AS  ob_03_qty
                , CASE WHEN substring(SALE_DAY, 5,2) = '04' THEN ob_qty END             AS  ob_04_qty
                , CASE WHEN substring(SALE_DAY, 5,2) = '05' THEN ob_qty END             AS  ob_05_qty
                , CASE WHEN substring(SALE_DAY, 5,2) = '06' THEN ob_qty END             AS  ob_06_qty
                , CASE WHEN substring(SALE_DAY, 5,2) = '07' THEN ob_qty END             AS  ob_07_qty
                , CASE WHEN substring(SALE_DAY, 5,2) = '08' THEN ob_qty END             AS  ob_08_qty
                , CASE WHEN substring(SALE_DAY, 5,2) = '09' THEN ob_qty END             AS  ob_09_qty
                , CASE WHEN substring(SALE_DAY, 5,2) = '10' THEN ob_qty END             AS  ob_10_qty
                , CASE WHEN substring(SALE_DAY, 5,2) = '11' THEN ob_qty END             AS  ob_11_qty
                , CASE WHEN substring(SALE_DAY, 5,2) = '12' THEN ob_qty END             AS  ob_12_qty

                , CASE WHEN substring(sale_DAY, 5,2) = '01' THEN ob_amt END             AS  ob_01_amt
                , CASE WHEN substring(sale_DAY, 5,2) = '02' THEN ob_amt END             AS  ob_02_amt
                , CASE WHEN substring(sale_DAY, 5,2) = '03' THEN ob_amt END             AS  ob_03_amt
                , CASE WHEN substring(sale_DAY, 5,2) = '04' THEN ob_amt END             AS  ob_04_amt
                , CASE WHEN substring(sale_DAY, 5,2) = '05' THEN ob_amt END             AS  ob_05_amt
                , CASE WHEN substring(sale_DAY, 5,2) = '06' THEN ob_amt END             AS  ob_06_amt
                , CASE WHEN substring(sale_DAY, 5,2) = '07' THEN ob_amt END             AS  ob_07_amt
                , CASE WHEN substring(sale_DAY, 5,2) = '08' THEN ob_amt END             AS  ob_08_amt
                , CASE WHEN substring(sale_DAY, 5,2) = '09' THEN ob_amt END             AS  ob_09_amt
                , CASE WHEN substring(sale_DAY, 5,2) = '10' THEN ob_amt END             AS  ob_10_amt
                , CASE WHEN substring(sale_DAY, 5,2) = '11' THEN ob_amt END             AS  ob_11_amt
                , CASE WHEN substring(sale_DAY, 5,2) = '12' THEN ob_amt END             AS  ob_12_amt

                , CASE WHEN substring(SALE_DAY, 5,2) = '01' THEN in_amt END             AS  in_01_amt
                , CASE WHEN substring(SALE_DAY, 5,2) = '02' THEN in_amt END             AS  in_02_amt
                , CASE WHEN substring(SALE_DAY, 5,2) = '03' THEN in_amt END             AS  in_03_amt
                , CASE WHEN substring(SALE_DAY, 5,2) = '04' THEN in_amt END             AS  in_04_amt
                , CASE WHEN substring(SALE_DAY, 5,2) = '05' THEN in_amt END             AS  in_05_amt
                , CASE WHEN substring(SALE_DAY, 5,2) = '06' THEN in_amt END             AS  in_06_amt
                , CASE WHEN substring(SALE_DAY, 5,2) = '07' THEN in_amt END             AS  in_07_amt
                , CASE WHEN substring(SALE_DAY, 5,2) = '08' THEN in_amt END             AS  in_08_amt
                , CASE WHEN substring(SALE_DAY, 5,2) = '09' THEN in_amt END             AS  in_09_amt
                , CASE WHEN substring(SALE_DAY, 5,2) = '10' THEN in_amt END             AS  in_10_amt
                , CASE WHEN substring(SALE_DAY, 5,2) = '11' THEN in_amt END             AS  in_11_amt
                , CASE WHEN substring(SALE_DAY, 5,2) = '12' THEN in_amt END             AS  in_12_amt

            FROM  STSALETB as a
            WHERE left(SALE_DAY,4) = #{paramYear }
            ) b

            left outer join MCUSTTB as mc ON mc.CUST_CD = b.cust_cd

        WHERE 1=1
          AND mc.CUST_NM != ''
            <if test='paramValue != null and paramValue != ""'>
                AND ( mc.CUST_NM LIKE CONCAT( '%', #{paramValue }, '%' )
                OR  b.cust_cd LIKE CONCAT( '%', #{paramValue }, '%')
                )
            </if>
        GROUP BY b.cust_cd

    </select>

    <!-- 거래처 판매현황 -->
    <select id="sal4450_list" resultType="java.util.HashMap">
        SELECT
               b.cust_cd                       as  custCd   -- 거래처코드
             , mc.CUST_NM                      as  custNm   -- 거래처명
             , b.o_qty                         as  oQty     -- 출고수량
             , b.o_amt                         as  oAmt     -- 출고금액
             , b.j_qty                         as  jQty     -- 증정수량
             , b.b_qty                         as  bQty     -- 반품수량
             , b.b_amt                         as  bAmt     -- 반품금액
             , b.o_amt - b.b_amt               as  sAmt     -- 매출금액
             , b.in_amt                        as  inAmt    -- 수금액
        FROM (
                 SELECT
                        a.cust_cd                       as  cust_cd   -- 거래처코드
                      , sum(a.o_qty)                    as  o_qty     -- 출고수량
                      , sum(a.o_amt)                    as  o_amt     -- 출고금액
                      , sum(a.j_qty)                    as  j_qty     -- 증정수량
                      , sum(a.b_qty)                    as  b_qty     -- 반품수량
                      , sum(a.b_amt)                    as  b_amt     -- 반품금액
                      , sum(a.in_amt)                   as  in_amt    -- 수금액
                 FROM (
                          SELECT cust_cd                                              -- 거래처코드
                               , if(ifnull(div_cd, '0') = '1', if(ifnull(DEAL_FG,'0000000') != '4021205', QTY, 0), 0) as o_qty        -- 출고수량
                               , if(ifnull(div_cd, '0') = '1', if(ifnull(DEAL_FG,'0000000') != '4021205', AMT, 0), 0) as o_amt        -- 출고금액
                               , if(ifnull(div_cd, '0') = '9',                                           QTY, 0) as b_qty        -- 반품수량
                               , if(ifnull(div_cd, '0') = '9',                                           AMT, 0) as b_amt        -- 반품금액
                               , if(ifnull(div_cd, '0') = '1', if(ifnull(DEAL_FG,'0000000') = '4021205',  QTY, 0), 0) as j_qty        -- 증정
                               , 0                                                                                     as in_amt

                          FROM SDEALDTB
                          WHERE DEAL_DAY BETWEEN #{paramPeriodFrom} AND  #{paramPeriodTo}   -- 기간

                          UNION ALL

                          SELECT cust_cd                                              -- 거래처코드
                               , 0                  as  o_qty        -- 출고수량
                               , 0                  as  o_amt        -- 출고금액
                               , 0                  as  b_qty        -- 반품수량
                               , 0                  as  b_amt        -- 반품금액
                               , 0                  as  j_qty        -- 증정
                               , ifnull(AMT, 0)     as  in_amt       -- 수금액

                          FROM SACCTB

                          where ACC_DAY  BETWEEN #{paramPeriodFrom} AND  #{paramPeriodTo}   -- 기간


                      ) a
                 GROUP BY a.CUST_CD

             ) b
                 -- 거래처코드
                 left outer join MCUSTTB as mc ON mc.CUST_CD = b.cust_cd

            WHERE 1=1
            <if test='paramValue != null and paramValue != ""'>
                AND ( mc.CUST_NM LIKE CONCAT( '%', #{paramValue }, '%' )
                OR  b.cust_cd LIKE CONCAT( '%', #{paramValue }, '%')
                )
            </if>
        ORDER BY b.cust_cd

    </select>

    <!-- 년간 도서출고 명세 -->
    <select id="sal4460_list" resultType="java.util.HashMap">
        SELECT    b.PROD_CD                     as  prodCd
                , mp.PROD_NM                    as  prodNm
                , ifnull(sum(i_01_qty), 0)+ifnull(sum(i_02_qty),0)+ifnull(sum(i_03_qty),0)+ifnull(sum(i_04_qty),0)+ifnull(sum(i_05_qty),0)+ifnull(sum(i_06_qty),0)+ifnull(sum(i_07_qty),0)+ifnull(sum(i_08_qty),0)+ifnull(sum(i_09_qty),0)+ifnull(sum(i_10_qty),0)+ifnull(sum(i_11_qty),0)+ifnull(sum(i_12_qty),0) as totIQty
                , ifnull(sum(ib_01_qty), 0)+ifnull(sum(ib_02_qty),0)+ifnull(sum(ib_03_qty),0)+ifnull(sum(ib_04_qty),0)+ifnull(sum(ib_05_qty),0)+ifnull(sum(ib_06_qty),0)+ifnull(sum(ib_07_qty),0)+ifnull(sum(ib_08_qty),0)+ifnull(sum(ib_09_qty),0)+ifnull(sum(ib_10_qty),0)+ifnull(sum(ib_11_qty),0)+ifnull(sum(ib_12_qty),0) as totIbQty
                , ifnull(sum(o_01_qty), 0)+ifnull(sum(o_02_qty),0)+ifnull(sum(o_03_qty),0)+ifnull(sum(o_04_qty),0)+ifnull(sum(o_05_qty),0)+ifnull(sum(o_06_qty),0)+ifnull(sum(o_07_qty),0)+ifnull(sum(o_08_qty),0)+ifnull(sum(o_09_qty),0)+ifnull(sum(o_10_qty),0)+ifnull(sum(o_11_qty),0)+ifnull(sum(o_12_qty),0) as totOQty
                , ifnull(sum(oj_01_qty), 0)+ifnull(sum(oj_02_qty),0)+ifnull(sum(oj_03_qty),0)+ifnull(sum(oj_04_qty),0)+ifnull(sum(oj_05_qty),0)+ifnull(sum(oj_06_qty),0)+ifnull(sum(oj_07_qty),0)+ifnull(sum(oj_08_qty),0)+ifnull(sum(oj_09_qty),0)+ifnull(sum(oj_10_qty),0)+ifnull(sum(oj_11_qty),0)+ifnull(sum(oj_12_qty),0) as totOjQty
                , ifnull(sum(ob_01_qty), 0)+ifnull(sum(ob_02_qty),0)+ifnull(sum(ob_03_qty),0)+ifnull(sum(ob_04_qty),0)+ifnull(sum(ob_05_qty),0)+ifnull(sum(ob_06_qty),0)+ifnull(sum(ob_07_qty),0)+ifnull(sum(ob_08_qty),0)+ifnull(sum(ob_09_qty),0)+ifnull(sum(ob_10_qty),0)+ifnull(sum(ob_11_qty),0)+ifnull(sum(ob_12_qty),0) as totObQty
                , ifnull(sum(ox_01_qty), 0)+ifnull(sum(ox_02_qty),0)+ifnull(sum(ox_03_qty),0)+ifnull(sum(ox_04_qty),0)+ifnull(sum(ox_05_qty),0)+ifnull(sum(ox_06_qty),0)+ifnull(sum(ox_07_qty),0)+ifnull(sum(ox_08_qty),0)+ifnull(sum(ox_09_qty),0)+ifnull(sum(ox_10_qty),0)+ifnull(sum(ox_11_qty),0)+ifnull(sum(ox_12_qty),0) as totOxQty
                , ifnull(sum(oz_01_qty), 0)+ifnull(sum(oz_02_qty),0)+ifnull(sum(oz_03_qty),0)+ifnull(sum(oz_04_qty),0)+ifnull(sum(oz_05_qty),0)+ifnull(sum(oz_06_qty),0)+ifnull(sum(oz_07_qty),0)+ifnull(sum(oz_08_qty),0)+ifnull(sum(oz_09_qty),0)+ifnull(sum(oz_10_qty),0)+ifnull(sum(oz_11_qty),0)+ifnull(sum(oz_12_qty),0) as totOzQty

                , ifnull(sum(i_01_qty),0)  as m01IQty
                , ifnull(sum(i_02_qty),0)  as m02IQty
                , ifnull(sum(i_03_qty),0)  as m03IQty
                , ifnull(sum(i_04_qty),0)  as m04IQty
                , ifnull(sum(i_05_qty),0)  as m05IQty
                , ifnull(sum(i_06_qty),0)  as m06IQty
                , ifnull(sum(i_07_qty),0)  as m07IQty
                , ifnull(sum(i_08_qty),0)  as m08IQty
                , ifnull(sum(i_09_qty),0)  as m09IQty
                , ifnull(sum(i_10_qty),0)  as m10IQty
                , ifnull(sum(i_11_qty),0)  as m11IQty
                , ifnull(sum(i_12_qty),0)  as m12IQty

                , ifnull(sum(ib_01_qty),0)  as m01IbQty
                , ifnull(sum(ib_02_qty),0)  as m02IbQty
                , ifnull(sum(ib_03_qty),0)  as m03IbQty
                , ifnull(sum(ib_04_qty),0)  as m04IbQty
                , ifnull(sum(ib_05_qty),0)  as m05IbQty
                , ifnull(sum(ib_06_qty),0)  as m06IbQty
                , ifnull(sum(ib_07_qty),0)  as m07IbQty
                , ifnull(sum(ib_08_qty),0)  as m08IbQty
                , ifnull(sum(ib_09_qty),0)  as m09IbQty
                , ifnull(sum(ib_10_qty),0)  as m10IbQty
                , ifnull(sum(ib_11_qty),0)  as m11IbQty
                , ifnull(sum(ib_12_qty),0)  as m12IbQty

                , ifnull(sum(o_01_qty),0)  as m01OQty
                , ifnull(sum(o_02_qty),0)  as m02OQty
                , ifnull(sum(o_03_qty),0)  as m03OQty
                , ifnull(sum(o_04_qty),0)  as m04OQty
                , ifnull(sum(o_05_qty),0)  as m05OQty
                , ifnull(sum(o_06_qty),0)  as m06OQty
                , ifnull(sum(o_07_qty),0)  as m07OQty
                , ifnull(sum(o_08_qty),0)  as m08OQty
                , ifnull(sum(o_09_qty),0)  as m09OQty
                , ifnull(sum(o_10_qty),0)  as m10OQty
                , ifnull(sum(o_11_qty),0)  as m11OQty
                , ifnull(sum(o_12_qty),0)  as m12OQty

                , ifnull(sum(oj_01_qty),0)  as m01OjQty
                , ifnull(sum(oj_02_qty),0)  as m02OjQty
                , ifnull(sum(oj_03_qty),0)  as m03OjQty
                , ifnull(sum(oj_04_qty),0)  as m04OjQty
                , ifnull(sum(oj_05_qty),0)  as m05OjQty
                , ifnull(sum(oj_06_qty),0)  as m06OjQty
                , ifnull(sum(oj_07_qty),0)  as m07OjQty
                , ifnull(sum(oj_08_qty),0)  as m08OjQty
                , ifnull(sum(oj_09_qty),0)  as m09OjQty
                , ifnull(sum(oj_10_qty),0)  as m10OjQty
                , ifnull(sum(oj_11_qty),0)  as m11OjQty
                , ifnull(sum(oj_12_qty),0)  as m12OjQty

                , ifnull(sum(ob_01_qty),0)  as m01ObQty
                , ifnull(sum(ob_02_qty),0)  as m02ObQty
                , ifnull(sum(ob_03_qty),0)  as m03ObQty
                , ifnull(sum(ob_04_qty),0)  as m04ObQty
                , ifnull(sum(ob_05_qty),0)  as m05ObQty
                , ifnull(sum(ob_06_qty),0)  as m06ObQty
                , ifnull(sum(ob_07_qty),0)  as m07ObQty
                , ifnull(sum(ob_08_qty),0)  as m08ObQty
                , ifnull(sum(ob_09_qty),0)  as m09ObQty
                , ifnull(sum(ob_10_qty),0)  as m10ObQty
                , ifnull(sum(ob_11_qty),0)  as m11ObQty
                , ifnull(sum(ob_12_qty),0)  as m12ObQty

                , ifnull(sum(ox_01_qty),0)  as m01OxQty
                , ifnull(sum(ox_02_qty),0)  as m02OxQty
                , ifnull(sum(ox_03_qty),0)  as m03OxQty
                , ifnull(sum(ox_04_qty),0)  as m04OxQty
                , ifnull(sum(ox_05_qty),0)  as m05OxQty
                , ifnull(sum(ox_06_qty),0)  as m06OxQty
                , ifnull(sum(ox_07_qty),0)  as m07OxQty
                , ifnull(sum(ox_08_qty),0)  as m08OxQty
                , ifnull(sum(ox_09_qty),0)  as m09OxQty
                , ifnull(sum(ox_10_qty),0)  as m10OxQty
                , ifnull(sum(ox_11_qty),0)  as m11OxQty
                , ifnull(sum(ox_12_qty),0)  as m12OxQty

                , ifnull(sum(oz_01_qty),0)  as m01OzQty
                , ifnull(sum(oz_02_qty),0)  as m02OzQty
                , ifnull(sum(oz_03_qty),0)  as m03OzQty
                , ifnull(sum(oz_04_qty),0)  as m04OzQty
                , ifnull(sum(oz_05_qty),0)  as m05OzQty
                , ifnull(sum(oz_06_qty),0)  as m06OzQty
                , ifnull(sum(oz_07_qty),0)  as m07OzQty
                , ifnull(sum(oz_08_qty),0)  as m08OzQty
                , ifnull(sum(oz_09_qty),0)  as m09OzQty
                , ifnull(sum(oz_10_qty),0)  as m10OzQty
                , ifnull(sum(oz_11_qty),0)  as m11OzQty
                , ifnull(sum(oz_12_qty),0)  as m12OzQty
            FROM (
                    SELECT
                          PROD_CD
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '01' THEN i_qty END AS i_01_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '02' THEN i_qty END AS i_02_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '03' THEN i_qty END AS i_03_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '04' THEN i_qty END AS i_04_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '05' THEN i_qty END AS i_05_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '06' THEN i_qty END AS i_06_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '07' THEN i_qty END AS i_07_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '08' THEN i_qty END AS i_08_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '09' THEN i_qty END AS i_09_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '10' THEN i_qty END AS i_10_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '11' THEN i_qty END AS i_11_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '12' THEN i_qty END AS i_12_qty

                        , CASE WHEN substring(STOCK_DAY, 5,2) = '01' THEN ib_qty END AS ib_01_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '02' THEN ib_qty END AS ib_02_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '03' THEN ib_qty END AS ib_03_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '04' THEN ib_qty END AS ib_04_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '05' THEN ib_qty END AS ib_05_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '06' THEN ib_qty END AS ib_06_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '07' THEN ib_qty END AS ib_07_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '08' THEN ib_qty END AS ib_08_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '09' THEN ib_qty END AS ib_09_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '10' THEN ib_qty END AS ib_10_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '11' THEN ib_qty END AS ib_11_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '12' THEN ib_qty END AS ib_12_qty

                        , CASE WHEN substring(STOCK_DAY, 5,2) = '01' THEN o_qty END AS o_01_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '02' THEN o_qty END AS o_02_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '03' THEN o_qty END AS o_03_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '04' THEN o_qty END AS o_04_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '05' THEN o_qty END AS o_05_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '06' THEN o_qty END AS o_06_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '07' THEN o_qty END AS o_07_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '08' THEN o_qty END AS o_08_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '09' THEN o_qty END AS o_09_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '10' THEN o_qty END AS o_10_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '11' THEN o_qty END AS o_11_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '12' THEN o_qty END AS o_12_qty

                        , CASE WHEN substring(STOCK_DAY, 5,2) = '01' THEN oj_qty END AS oj_01_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '02' THEN oj_qty END AS oj_02_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '03' THEN oj_qty END AS oj_03_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '04' THEN oj_qty END AS oj_04_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '05' THEN oj_qty END AS oj_05_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '06' THEN oj_qty END AS oj_06_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '07' THEN oj_qty END AS oj_07_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '08' THEN oj_qty END AS oj_08_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '09' THEN oj_qty END AS oj_09_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '10' THEN oj_qty END AS oj_10_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '11' THEN oj_qty END AS oj_11_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '12' THEN oj_qty END AS oj_12_qty

                        , CASE WHEN substring(STOCK_DAY, 5,2) = '01' THEN ob_qty END AS ob_01_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '02' THEN ob_qty END AS ob_02_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '03' THEN ob_qty END AS ob_03_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '04' THEN ob_qty END AS ob_04_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '05' THEN ob_qty END AS ob_05_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '06' THEN ob_qty END AS ob_06_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '07' THEN ob_qty END AS ob_07_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '08' THEN ob_qty END AS ob_08_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '09' THEN ob_qty END AS ob_09_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '10' THEN ob_qty END AS ob_10_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '11' THEN ob_qty END AS ob_11_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '12' THEN ob_qty END AS ob_12_qty

                        , CASE WHEN substring(STOCK_DAY, 5,2) = '01' THEN ox_qty END AS ox_01_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '02' THEN ox_qty END AS ox_02_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '03' THEN ox_qty END AS ox_03_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '04' THEN ox_qty END AS ox_04_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '05' THEN ox_qty END AS ox_05_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '06' THEN ox_qty END AS ox_06_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '07' THEN ox_qty END AS ox_07_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '08' THEN ox_qty END AS ox_08_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '09' THEN ox_qty END AS ox_09_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '10' THEN ox_qty END AS ox_10_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '11' THEN ox_qty END AS ox_11_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '12' THEN ox_qty END AS ox_12_qty

                        , CASE WHEN substring(STOCK_DAY, 5,2) = '01' THEN oz_qty END AS oz_01_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '02' THEN oz_qty END AS oz_02_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '03' THEN oz_qty END AS oz_03_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '04' THEN oz_qty END AS oz_04_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '05' THEN oz_qty END AS oz_05_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '06' THEN oz_qty END AS oz_06_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '07' THEN oz_qty END AS oz_07_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '08' THEN oz_qty END AS oz_08_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '09' THEN oz_qty END AS oz_09_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '10' THEN oz_qty END AS oz_10_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '11' THEN oz_qty END AS oz_11_qty
                        , CASE WHEN substring(STOCK_DAY, 5,2) = '12' THEN oz_qty END AS oz_12_qty

                    FROM  SSTOCKTB st
                    WHERE left(STOCK_DAY,4) = #{paramYear }
            ) b
                left outer join MPRODTB as mp ON mp.PROD_CD = b.PROD_CD

            WHERE 1=1
            <if test='paramProdDiv != null and paramProdDiv != ""'>
                AND mp.PROD_DIV = #{paramProdDiv }
            </if>
            <if test='paramValue != null and paramValue != ""'>
                AND ( mp.PROD_NM LIKE CONCAT( '%', #{paramValue }, '%' )
                OR  b.prod_cd LIKE CONCAT( '%', #{paramValue }, '%')
                )
            </if>
            GROUP BY b.PROD_CD

    </select>


    <!-- 년간 거래처 매출 -->
    <select id="sal4470_list" resultType="java.util.HashMap">
        SELECT b.CUST_CD        as  custCd
             , mc.CUST_NM       as  custNm
             , ifnull(sum(o_01_amt), 0)+ifnull(sum(o_02_amt),0)+ifnull(sum(o_03_amt),0)+ifnull(sum(o_04_amt),0)+ifnull(sum(o_05_amt),0)+ifnull(sum(o_06_amt),0)+ifnull(sum(o_07_amt),0)+ifnull(sum(o_08_amt),0)+ifnull(sum(o_09_amt),0)+ifnull(sum(o_10_amt),0)+ifnull(sum(o_11_amt),0)+ifnull(sum(o_12_amt),0) as totAmt
             , ifnull(sum(o_01_amt),0)  as m01Amt
             , ifnull(sum(o_02_amt),0)  as m02Amt
             , ifnull(sum(o_03_amt),0)  as m03Amt
             , ifnull(sum(o_04_amt),0)  as m04Amt
             , ifnull(sum(o_05_amt),0)  as m05Amt
             , ifnull(sum(o_06_amt),0)  as m06Amt
             , ifnull(sum(o_07_amt),0)  as m07Amt
             , ifnull(sum(o_08_amt),0)  as m08Amt
             , ifnull(sum(o_09_amt),0)  as m09Amt
             , ifnull(sum(o_10_amt),0)  as m10Amt
             , ifnull(sum(o_11_amt),0)  as m11Amt
             , ifnull(sum(o_12_amt),0)  as m12Amt
        from
            ( SELECT
                    CUST_CD
                  , CASE WHEN substring(SALE_DAY, 5,2) = '01' THEN o_amt - ob_amt END AS o_01_amt
                  , CASE WHEN substring(SALE_DAY, 5,2) = '02' THEN o_amt - ob_amt END AS o_02_amt
                  , CASE WHEN substring(SALE_DAY, 5,2) = '03' THEN o_amt - ob_amt END AS o_03_amt
                  , CASE WHEN substring(SALE_DAY, 5,2) = '04' THEN o_amt - ob_amt END AS o_04_amt
                  , CASE WHEN substring(SALE_DAY, 5,2) = '05' THEN o_amt - ob_amt END AS o_05_amt
                  , CASE WHEN substring(SALE_DAY, 5,2) = '06' THEN o_amt - ob_amt END AS o_06_amt
                  , CASE WHEN substring(SALE_DAY, 5,2) = '07' THEN o_amt - ob_amt END AS o_07_amt
                  , CASE WHEN substring(SALE_DAY, 5,2) = '08' THEN o_amt - ob_amt END AS o_08_amt
                  , CASE WHEN substring(SALE_DAY, 5,2) = '09' THEN o_amt - ob_amt END AS o_09_amt
                  , CASE WHEN substring(SALE_DAY, 5,2) = '10' THEN o_amt - ob_amt END AS o_10_amt
                  , CASE WHEN substring(SALE_DAY, 5,2) = '11' THEN o_amt - ob_amt END AS o_11_amt
                  , CASE WHEN substring(SALE_DAY, 5,2) = '12' THEN o_amt - ob_amt END AS o_12_amt
             FROM  STSALETB a
             WHERE left(SALE_DAY,4) = #{paramYear } AND (o_amt != 0 OR ob_amt != 0)
            ) b

                left outer join MCUSTTB as mc ON mc.CUST_CD = b.CUST_CD

        WHERE 1=1
        <if test='paramValue != null and paramValue != ""'>
            AND ( mc.CUST_NM LIKE CONCAT( '%', #{paramValue }, '%' )
            OR  b.CUST_CD LIKE CONCAT( '%', #{paramValue }, '%')
            )
        </if>

        GROUP BY b.CUST_CD

    </select>


    <!-- 거래처도서출고명세(년) -->
    <select id="sal4480_list" resultType="java.util.HashMap">
        set @voj_01_qty := 0, @vox_01_qty := 0, @vob_01_qty := 0, @vob_01_amt := 0, @vo_01_qty := 0, @vo_01_amt := 0;
        set @voj_02_qty := 0, @vox_02_qty := 0, @vob_02_qty := 0, @vob_02_amt := 0, @vo_02_qty := 0, @vo_02_amt := 0;
        set @voj_03_qty := 0, @vox_03_qty := 0, @vob_03_qty := 0, @vob_03_amt := 0, @vo_03_qty := 0, @vo_03_amt := 0;
        set @voj_04_qty := 0, @vox_04_qty := 0, @vob_04_qty := 0, @vob_04_amt := 0, @vo_04_qty := 0, @vo_04_amt := 0;
        set @voj_05_qty := 0, @vox_05_qty := 0, @vob_05_qty := 0, @vob_05_amt := 0, @vo_05_qty := 0, @vo_05_amt := 0;
        set @voj_06_qty := 0, @vox_06_qty := 0, @vob_06_qty := 0, @vob_06_amt := 0, @vo_06_qty := 0, @vo_06_amt := 0;
        set @voj_07_qty := 0, @vox_07_qty := 0, @vob_07_qty := 0, @vob_07_amt := 0, @vo_07_qty := 0, @vo_07_amt := 0;
        set @voj_08_qty := 0, @vox_08_qty := 0, @vob_08_qty := 0, @vob_08_amt := 0, @vo_08_qty := 0, @vo_08_amt := 0;
        set @voj_09_qty := 0, @vox_09_qty := 0, @vob_09_qty := 0, @vob_09_amt := 0, @vo_09_qty := 0, @vo_09_amt := 0;
        set @voj_10_qty := 0, @vox_10_qty := 0, @vob_10_qty := 0, @vob_10_amt := 0, @vo_10_qty := 0, @vo_10_amt := 0;
        set @voj_11_qty := 0, @vox_11_qty := 0, @vob_11_qty := 0, @vob_11_amt := 0, @vo_11_qty := 0, @vo_11_amt := 0;
        set @voj_12_qty := 0, @vox_12_qty := 0, @vob_12_qty := 0, @vob_12_amt := 0, @vo_12_qty := 0, @vo_12_amt := 0;

        SELECT    e.prod_cd                 as  prodCd
                , mp.PROD_NM                as  prodNm

                , @voj_01_qty := e.oj_m01_qty   as  ojM01Qty
			    , @vox_01_qty := e.ox_m01_qty   as  oxM01Qty
			    , @vob_01_qty := e.ob_m01_qty   as  obM01Qty
			    , @vob_01_amt := e.ob_m01_amt   as  obM01Amt
			    ,  @vo_01_qty :=  e.o_m01_qty   as   oM01Qty
			    ,  @vo_01_amt :=  e.o_m01_amt   as   oM01Amt

			    , @voj_02_qty := e.oj_m02_qty   as  ojM02Qty
			    , @vox_02_qty := e.ox_m02_qty   as  oxM02Qty
			    , @vob_02_qty := e.ob_m02_qty   as  obM02Qty
			    , @vob_02_amt := e.ob_m02_amt   as  obM02Amt
			    ,  @vo_02_qty :=  e.o_m02_qty   as   oM02Qty
			    ,  @vo_02_amt :=  e.o_m02_amt   as   oM02Amt

			    , @voj_03_qty := e.oj_m03_qty   as  ojM03Qty
			    , @vox_03_qty := e.ox_m03_qty   as  oxM03Qty
			    , @vob_03_qty := e.ob_m03_qty   as  obM03Qty
			    , @vob_03_amt := e.ob_m03_amt   as  obM03Amt
			    ,  @vo_03_qty :=  e.o_m03_qty   as   oM03Qty
			    ,  @vo_03_amt :=  e.o_m03_amt   as   oM03Amt

			    , @voj_04_qty := e.oj_m04_qty   as  ojM04Qty
			    , @vox_04_qty := e.ox_m04_qty   as  oxM04Qty
			    , @vob_04_qty := e.ob_m04_qty   as  obM04Qty
			    , @vob_04_amt := e.ob_m04_amt   as  obM04Amt
			    ,  @vo_04_qty :=  e.o_m04_qty   as   oM04Qty
			    ,  @vo_04_amt :=  e.o_m04_amt   as   oM04Amt

			    , @voj_05_qty := e.oj_m05_qty   as  ojM05Qty
			    , @vox_05_qty := e.ox_m05_qty   as  oxM05Qty
			    , @vob_05_qty := e.ob_m05_qty   as  obM05Qty
			    , @vob_05_amt := e.ob_m05_amt   as  obM05Amt
			    ,  @vo_05_qty :=  e.o_m05_qty   as   oM05Qty
			    ,  @vo_05_amt :=  e.o_m05_amt   as   oM05Amt

			    , @voj_06_qty := e.oj_m06_qty   as  ojM06Qty
			    , @vox_06_qty := e.ox_m06_qty   as  oxM06Qty
			    , @vob_06_qty := e.ob_m06_qty   as  obM06Qty
			    , @vob_06_amt := e.ob_m06_amt   as  obM06Amt
			    ,  @vo_06_qty :=  e.o_m06_qty   as   oM06Qty
			    ,  @vo_06_amt :=  e.o_m06_amt   as   oM06Amt

			    , @voj_07_qty := e.oj_m07_qty   as  ojM07Qty
			    , @vox_07_qty := e.ox_m07_qty   as  oxM07Qty
			    , @vob_07_qty := e.ob_m07_qty   as  obM07Qty
			    , @vob_07_amt := e.ob_m07_amt   as  obM07Amt
			    ,  @vo_07_qty :=  e.o_m07_qty   as   oM07Qty
			    ,  @vo_07_amt :=  e.o_m07_amt   as   oM07Amt

			    , @voj_08_qty := e.oj_m08_qty   as  ojM08Qty
			    , @vox_08_qty := e.ox_m08_qty   as  oxM08Qty
			    , @vob_08_qty := e.ob_m08_qty   as  obM08Qty
			    , @vob_08_amt := e.ob_m08_amt   as  obM08Amt
			    ,  @vo_08_qty :=  e.o_m08_qty   as   oM08Qty
			    ,  @vo_08_amt :=  e.o_m08_amt   as   oM08Amt

			    , @voj_09_qty := e.oj_m09_qty   as  ojM09Qty
			    , @vox_09_qty := e.ox_m09_qty   as  oxM09Qty
			    , @vob_09_qty := e.ob_m09_qty   as  obM09Qty
			    , @vob_09_amt := e.ob_m09_amt   as  obM09Amt
			    ,  @vo_09_qty :=  e.o_m09_qty   as   oM09Qty
			    ,  @vo_09_amt :=  e.o_m09_amt   as   oM09Amt

			    , @voj_10_qty := e.oj_m10_qty   as  ojM10Qty
			    , @vox_10_qty := e.ox_m10_qty   as  oxM10Qty
			    , @vob_10_qty := e.ob_m10_qty   as  obM10Qty
			    , @vob_10_amt := e.ob_m10_amt   as  obM10Amt
			    ,  @vo_10_qty :=  e.o_m10_qty   as   oM10Qty
			    ,  @vo_10_amt :=  e.o_m10_amt   as   oM10Amt

			    , @voj_11_qty := e.oj_m11_qty   as  ojM11Qty
			    , @vox_11_qty := e.ox_m11_qty   as  oxM11Qty
			    , @vob_11_qty := e.ob_m11_qty   as  obM11Qty
			    , @vob_11_amt := e.ob_m11_amt   as  obM11Amt
			    ,  @vo_11_qty :=  e.o_m11_qty   as   oM11Qty
			    ,  @vo_11_amt :=  e.o_m11_amt   as   oM11Amt

			    , @voj_12_qty := e.oj_m12_qty   as  ojM12Qty
			    , @vox_12_qty := e.ox_m12_qty   as  oxM12Qty
			    , @vob_12_qty := e.ob_m12_qty   as  obM12Qty
			    , @vob_12_amt := e.ob_m12_amt   as  obM12Amt
			    ,  @vo_12_qty :=  e.o_m12_qty   as   oM12Qty
			    ,  @vo_12_amt :=  e.o_m12_amt   as   oM12Amt

			    , @voj_01_qty + @voj_02_qty + @voj_03_qty + @voj_04_qty + @voj_05_qty + @voj_06_qty + @voj_07_qty + @voj_08_qty + @voj_09_qty + @voj_10_qty + @voj_11_qty + @voj_12_qty   as  tOjQty
			    , @vox_01_qty + @vox_02_qty + @vox_03_qty + @vox_04_qty + @vox_05_qty + @vox_06_qty + @vox_07_qty + @vox_08_qty + @vox_09_qty + @vox_10_qty + @vox_11_qty + @vox_12_qty   as  tOxQty
			    , @vob_01_qty + @vob_02_qty + @vob_03_qty + @vob_04_qty + @vob_05_qty + @vob_06_qty + @vob_07_qty + @vob_08_qty + @vob_09_qty + @vob_10_qty + @vob_11_qty + @vob_12_qty   as  tObQty
			    , @vob_01_amt + @vob_02_amt + @vob_03_amt + @vob_04_amt + @vob_05_amt + @vob_06_amt + @vob_07_amt + @vob_08_amt + @vob_09_amt + @vob_10_amt + @vob_11_amt + @vob_12_amt   as  tObAmt
			    ,  @vo_01_qty +  @vo_02_qty +  @vo_03_qty +  @vo_04_qty +  @vo_05_qty +  @vo_06_qty +  @vo_07_qty +  @vo_08_qty +  @vo_09_qty +  @vo_10_qty +  @vo_11_qty +  @vo_12_qty   as  tOQty
			    ,  @vo_01_amt +  @vo_02_amt +  @vo_03_amt +  @vo_04_amt +  @vo_05_amt +  @vo_06_amt +  @vo_07_amt +  @vo_08_amt +  @vo_09_amt +  @vo_10_amt +  @vo_11_amt +  @vo_12_amt   as  tOAmt

        FROM (

            SELECT    d.PROD_CD               as  prod_cd

                , ifnull(sum(d.oj_01_qty),0)  as  oj_m01_qty
                , ifnull(sum(d.ox_01_qty),0)  as  ox_m01_qty
                , ifnull(sum(d.ob_01_qty),0)  as  ob_m01_qty
                , ifnull(sum(d.ob_01_amt),0)  as  ob_m01_amt
                , ifnull(sum(d.o_01_qty),0) as   o_m01_qty
                , ifnull(sum(d.o_01_amt),0) as   o_m01_amt

                , ifnull(sum(d.oj_02_qty),0)  as  oj_m02_qty
                , ifnull(sum(d.ox_02_qty),0) as  ox_m02_qty
                , ifnull(sum(d.ob_02_qty),0) as  ob_m02_qty
                , ifnull(sum(d.ob_02_amt),0) as  ob_m02_amt
                , ifnull(sum(d.o_02_qty),0)  as   o_m02_qty
                , ifnull(sum(d.o_02_amt),0)  as   o_m02_amt

                , ifnull(sum(d.oj_03_qty),0) as  oj_m03_qty
                , ifnull(sum(d.ox_03_qty),0) as  ox_m03_qty
                , ifnull(sum(d.ob_03_qty),0) as  ob_m03_qty
                , ifnull(sum(d.ob_03_amt),0) as  ob_m03_amt
                , ifnull(sum(d.o_03_qty),0)  as   o_m03_qty
                , ifnull(sum(d.o_03_amt),0)  as   o_m03_amt

                , ifnull(sum(d.oj_04_qty),0) as  oj_m04_qty
                , ifnull(sum(d.ox_04_qty),0) as  ox_m04_qty
                , ifnull(sum(d.ob_04_qty),0) as  ob_m04_qty
                , ifnull(sum(d.ob_04_amt),0) as  ob_m04_amt
                , ifnull(sum(d.o_04_qty),0)  as   o_m04_qty
                , ifnull(sum(d.o_04_amt),0)  as   o_m04_amt

                , ifnull(sum(d.oj_05_qty),0) as  oj_m05_qty
                , ifnull(sum(d.ox_05_qty),0) as  ox_m05_qty
                , ifnull(sum(d.ob_05_qty),0) as  ob_m05_qty
                , ifnull(sum(d.ob_05_amt),0) as  ob_m05_amt
                , ifnull(sum(d.o_05_qty),0)  as   o_m05_qty
                , ifnull(sum(d.o_05_amt),0)  as   o_m05_amt

                , ifnull(sum(d.oj_06_qty),0) as  oj_m06_qty
                , ifnull(sum(d.ox_06_qty),0) as  ox_m06_qty
                , ifnull(sum(d.ob_06_qty),0) as  ob_m06_qty
                , ifnull(sum(d.ob_06_amt),0) as  ob_m06_amt
                , ifnull(sum(d.o_06_qty),0)  as   o_m06_qty
                , ifnull(sum(d.o_06_amt),0)  as   o_m06_amt

                , ifnull(sum(d.oj_07_qty),0) as  oj_m07_qty
                , ifnull(sum(d.ox_07_qty),0) as  ox_m07_qty
                , ifnull(sum(d.ob_07_qty),0) as  ob_m07_qty
                , ifnull(sum(d.ob_07_amt),0) as  ob_m07_amt
                , ifnull(sum(d.o_07_qty),0)  as   o_m07_qty
                , ifnull(sum(d.o_07_amt),0)  as   o_m07_amt

                , ifnull(sum(d.oj_08_qty),0) as  oj_m08_qty
                , ifnull(sum(d.ox_08_qty),0) as  ox_m08_qty
                , ifnull(sum(d.ob_08_qty),0) as  ob_m08_qty
                , ifnull(sum(d.ob_08_amt),0) as  ob_m08_amt
                , ifnull(sum(d.o_08_qty),0)  as   o_m08_qty
                , ifnull(sum(d.o_08_amt),0)  as   o_m08_amt

                , ifnull(sum(d.oj_09_qty),0) as  oj_m09_qty
                , ifnull(sum(d.ox_09_qty),0) as  ox_m09_qty
                , ifnull(sum(d.ob_09_qty),0) as  ob_m09_qty
                , ifnull(sum(d.ob_09_amt),0) as  ob_m09_amt
                , ifnull(sum(d.o_09_qty),0)  as   o_m09_qty
                , ifnull(sum(d.o_09_amt),0)  as   o_m09_amt

                , ifnull(sum(d.oj_10_qty),0) as  oj_m10_qty
                , ifnull(sum(d.ox_10_qty),0) as  ox_m10_qty
                , ifnull(sum(d.ob_10_qty),0) as  ob_m10_qty
                , ifnull(sum(d.ob_10_amt),0) as  ob_m10_amt
                , ifnull(sum(d.o_10_qty),0)  as   o_m10_qty
                , ifnull(sum(d.o_10_amt),0)  as   o_m10_amt

                , ifnull(sum(d.oj_11_qty),0) as  oj_m11_qty
                , ifnull(sum(d.ox_11_qty),0) as  ox_m11_qty
                , ifnull(sum(d.ob_11_qty),0) as  ob_m11_qty
                , ifnull(sum(d.ob_11_amt),0) as  ob_m11_amt
                , ifnull(sum(d.o_11_qty),0)  as   o_m11_qty
                , ifnull(sum(d.o_11_amt),0)  as   o_m11_amt

                , ifnull(sum(d.oj_12_qty),0) as  oj_m12_qty
                , ifnull(sum(d.ox_12_qty),0) as  ox_m12_qty
                , ifnull(sum(d.ob_12_qty),0) as  ob_m12_qty
                , ifnull(sum(d.ob_12_amt),0) as  ob_m12_amt
                , ifnull(sum(d.o_12_qty),0)  as   o_m12_qty
                , ifnull(sum(d.o_12_amt),0)  as   o_m12_amt

            FROM (
                SELECT
                      c.prod_cd                 AS prod_cd
                    , CASE WHEN c.o_month = '01' THEN c.oj_qty END AS oj_01_qty
                    , CASE WHEN c.o_month = '01' THEN c.ox_qty END AS ox_01_qty
                    , CASE WHEN c.o_month = '01' THEN c.ob_qty END AS ob_01_qty
                    , CASE WHEN c.o_month = '01' THEN c.ob_amt END AS ob_01_amt
                    , CASE WHEN c.o_month = '01' THEN c.o_qty  END AS  o_01_qty
                    , CASE WHEN c.o_month = '01' THEN c.o_amt  END AS  o_01_amt

                    , CASE WHEN c.o_month = '02' THEN c.oj_qty END AS oj_02_qty
                    , CASE WHEN c.o_month = '02' THEN c.ox_qty END AS ox_02_qty
                    , CASE WHEN c.o_month = '02' THEN c.ob_qty END AS ob_02_qty
                    , CASE WHEN c.o_month = '02' THEN c.ob_amt END AS ob_02_amt
                    , CASE WHEN c.o_month = '02' THEN c.o_qty  END AS  o_02_qty
                    , CASE WHEN c.o_month = '02' THEN c.o_amt  END AS  o_02_amt

                    , CASE WHEN c.o_month = '03' THEN c.oj_qty END AS oj_03_qty
                    , CASE WHEN c.o_month = '03' THEN c.ox_qty END AS ox_03_qty
                    , CASE WHEN c.o_month = '03' THEN c.ob_qty END AS ob_03_qty
                    , CASE WHEN c.o_month = '03' THEN c.ob_amt END AS ob_03_amt
                    , CASE WHEN c.o_month = '03' THEN c.o_qty  END AS  o_03_qty
                    , CASE WHEN c.o_month = '03' THEN c.o_amt  END AS  o_03_amt

                    , CASE WHEN c.o_month = '04' THEN c.oj_qty END AS oj_04_qty
                    , CASE WHEN c.o_month = '04' THEN c.ox_qty END AS ox_04_qty
                    , CASE WHEN c.o_month = '04' THEN c.ob_qty END AS ob_04_qty
                    , CASE WHEN c.o_month = '04' THEN c.ob_amt END AS ob_04_amt
                    , CASE WHEN c.o_month = '04' THEN c.o_qty  END AS  o_04_qty
                    , CASE WHEN c.o_month = '04' THEN c.o_amt  END AS  o_04_amt

                    , CASE WHEN c.o_month = '05' THEN c.oj_qty END AS oj_05_qty
                    , CASE WHEN c.o_month = '05' THEN c.ox_qty END AS ox_05_qty
                    , CASE WHEN c.o_month = '05' THEN c.ob_qty END AS ob_05_qty
                    , CASE WHEN c.o_month = '05' THEN c.ob_amt END AS ob_05_amt
                    , CASE WHEN c.o_month = '05' THEN c.o_qty  END AS  o_05_qty
                    , CASE WHEN c.o_month = '05' THEN c.o_amt  END AS  o_05_amt

                    , CASE WHEN c.o_month = '06' THEN c.oj_qty END AS oj_06_qty
                    , CASE WHEN c.o_month = '06' THEN c.ox_qty END AS ox_06_qty
                    , CASE WHEN c.o_month = '06' THEN c.ob_qty END AS ob_06_qty
                    , CASE WHEN c.o_month = '06' THEN c.ob_amt END AS ob_06_amt
                    , CASE WHEN c.o_month = '06' THEN c.o_qty  END AS  o_06_qty
                    , CASE WHEN c.o_month = '06' THEN c.o_amt  END AS  o_06_amt

                    , CASE WHEN c.o_month = '07' THEN c.oj_qty END AS oj_07_qty
                    , CASE WHEN c.o_month = '07' THEN c.ox_qty END AS ox_07_qty
                    , CASE WHEN c.o_month = '07' THEN c.ob_qty END AS ob_07_qty
                    , CASE WHEN c.o_month = '07' THEN c.ob_amt END AS ob_07_amt
                    , CASE WHEN c.o_month = '07' THEN c.o_qty  END AS  o_07_qty
                    , CASE WHEN c.o_month = '07' THEN c.o_amt  END AS  o_07_amt

                    , CASE WHEN c.o_month = '08' THEN c.oj_qty END AS oj_08_qty
                    , CASE WHEN c.o_month = '08' THEN c.ox_qty END AS ox_08_qty
                    , CASE WHEN c.o_month = '08' THEN c.ob_qty END AS ob_08_qty
                    , CASE WHEN c.o_month = '08' THEN c.ob_amt END AS ob_08_amt
                    , CASE WHEN c.o_month = '08' THEN c.o_qty  END AS  o_08_qty
                    , CASE WHEN c.o_month = '08' THEN c.o_amt  END AS  o_08_amt

                    , CASE WHEN c.o_month = '09' THEN c.oj_qty END AS oj_09_qty
                    , CASE WHEN c.o_month = '09' THEN c.ox_qty END AS ox_09_qty
                    , CASE WHEN c.o_month = '09' THEN c.ob_qty END AS ob_09_qty
                    , CASE WHEN c.o_month = '09' THEN c.ob_amt END AS ob_09_amt
                    , CASE WHEN c.o_month = '09' THEN c.o_qty  END AS  o_09_qty
                    , CASE WHEN c.o_month = '09' THEN c.o_amt  END AS  o_09_amt

                    , CASE WHEN c.o_month = '10' THEN c.oj_qty END AS oj_10_qty
                    , CASE WHEN c.o_month = '10' THEN c.ox_qty END AS ox_10_qty
                    , CASE WHEN c.o_month = '10' THEN c.ob_qty END AS ob_10_qty
                    , CASE WHEN c.o_month = '10' THEN c.ob_amt END AS ob_10_amt
                    , CASE WHEN c.o_month = '10' THEN c.o_qty  END AS  o_10_qty
                    , CASE WHEN c.o_month = '10' THEN c.o_amt  END AS  o_10_amt

                    , CASE WHEN c.o_month = '11' THEN c.oj_qty END AS oj_11_qty
                    , CASE WHEN c.o_month = '11' THEN c.ox_qty END AS ox_11_qty
                    , CASE WHEN c.o_month = '11' THEN c.ob_qty END AS ob_11_qty
                    , CASE WHEN c.o_month = '11' THEN c.ob_amt END AS ob_11_amt
                    , CASE WHEN c.o_month = '11' THEN c.o_qty  END AS  o_11_qty
                    , CASE WHEN c.o_month = '11' THEN c.o_amt  END AS  o_11_amt

                    , CASE WHEN c.o_month = '12' THEN c.oj_qty END AS oj_12_qty
                    , CASE WHEN c.o_month = '12' THEN c.ox_qty END AS ox_12_qty
                    , CASE WHEN c.o_month = '12' THEN c.ob_qty END AS ob_12_qty
                    , CASE WHEN c.o_month = '12' THEN c.ob_amt END AS ob_12_amt
                    , CASE WHEN c.o_month = '12' THEN c.o_qty  END AS  o_12_qty
                    , CASE WHEN c.o_month = '12' THEN c.o_amt  END AS  o_12_amt

                FROM (

                    SELECT    substring(b.o_day,5,2)  as  o_month
                            , b.PROD_CD     as  prod_cd
                            , sum(b.oj_qty) as  oj_qty
                            , sum(b.ox_qty) as  ox_qty
                            , sum(b.ob_qty) as  ob_qty
                            , sum(b.ob_amt) as  ob_amt
                            , sum(b.o_qty)  as  o_qty
                            , sum(b.o_amt)  as  o_amt
                    FROM (
                        SELECT
                              o.DEAL_DAY                          as O_DAY
                            , o.PROD_CD                           as PROD_CD

                            , if(left(o.DEAL_FG,2) = '12' AND o.DIV_CD = '1', ifnull(o.QTY,0) , 0)   as OJ_QTY   -- 증정 수량
                            , if(left(o.DEAL_FG,2) = '19' AND o.DIV_CD = '1', ifnull(o.QTY,0) , 0)   as OX_QTY   -- 폐기 수량

                            , if(o.DIV_CD = '9', ifnull(o.QTY,0) , 0)               as OB_QTY   -- 반품 수량
                            , if(o.DIV_CD = '9', ifnull(o.AMT,0) , 0)               as OB_AMT   -- 반품 금액

                            , if(o.DIV_CD != '9' AND left(o.DEAL_FG,2) = '11', ifnull(o.QTY,0) , 0)  as O_QTY    -- 정상출고 수량
                            , if(o.DIV_CD != '9' AND left(o.DEAL_FG,2) = '11', ifnull(o.AMT,0) , 0)  as O_AMT    -- 정상출고 금액

                            , now() as UPDATE_DATE
                        FROM SDEALDTB o
                        WHERE left(o.DEAL_DAY, 4) = #{paramYear }
                          AND o.CUST_CD = #{paramCustCd }
                        ) b
                        GROUP BY left(b.o_day,6), b.prod_cd
                    ) c
                ) d
                GROUP BY  d.prod_cd
            ) e
            left outer join MPRODTB as mp ON mp.PROD_CD = e.PROD_CD

            WHERE 1=1
            <if test='paramValue != null and paramValue != ""'>
                AND ( mp.PROD_NM LIKE CONCAT( '%', #{paramValue }, '%' )
                OR  e.PROD_CD LIKE CONCAT( '%', #{paramValue }, '%')
                )
            </if>

    </select>



</mapper>